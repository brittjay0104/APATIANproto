config-magic detailed output

Brian McCallister is responsible for commit 2e84e68ec0eb70465a54d41c5a381f4ab452a093
Brian McCallister is responsible for commit fc6ea01bc764d1dbab222b788a682b8c5efcff8b
Brian McCallister is responsible for commit b9d0bf60c356e785b56f6e99c55baf393ced7d42
Brian McCallister is responsible for commit 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd
Brian McCallister is responsible for commit 936e4a28c843fd59b45025e0c42e3bcebb0ebda1
Brian McCallister is responsible for commit 6e183e33249d77787c7eb745f2ecb634e439c7e0
Brian McCallister is responsible for commit 82e6f2dc32b0204a7e508aecba8bf3430eb252c9
Brian McCallister is responsible for commit 444c110112d19c459e02f2517e2fe59c262f5aa2
Brian McCallister is responsible for commit 6813002792199961bc28648b67bf74ddaf1b7995
Brian McCallister is responsible for commit b0499c140380b66a90573b300687409d594c4e5d
Brian McCallister is responsible for commit 17ec358b7e5a877c968dd0392c83a23cedbd83f1
Brian McCallister is responsible for commit c64d4cd844a47c1728a62edb9a6691ed2e98e175
Brian McCallister is responsible for commit 5a67240db8a6977bfa1c226b941f2e9379bb1b48
Brian McCallister is responsible for commit 7271507604d9f4450db2827e9446aa5da1f736ae
Brian McCallister is responsible for commit 7b3fa0b4d5b608e37a73e5453e25669f658dbf58
Brian McCallister is responsible for commit 8ad79637cf0067e85e447317e54de4e6352c9076
Brian McCallister is responsible for commit 6699981d792b90936defeee748e9d9283b55aa78
Brian McCallister is responsible for commit de790b9f23a918501d7c6a2ac7ab858fc91f42af
Brian McCallister is responsible for commit 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a
Brian McCallister is responsible for commit 8558ad1480df91f23591e34589b7082e5ec658f7
Brian McCallister is responsible for commit daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0
Brian McCallister is responsible for commit d847a64f44435ac3163e57b1a0b02a55a9f90cfe
Brian McCallister is responsible for commit a1d4fa74b71e0a88516754d738d173db6417cdab
Brian McCallister is responsible for commit 78a4f463e6054d06f0bdca9b2f143f89b1edf13f
Brian McCallister is responsible for commit b6ea406693ce801f8f6420ef406ba782f4b75f88
Brian McCallister is responsible for commit ec18cb80004e0d773474fa0bd4aeca53d35c180f
Brian McCallister is responsible for commit 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08
Brian McCallister is responsible for commit e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
Brian McCallister is responsible for commit 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
Brian McCallister is responsible for commit 6bcf64aacb6abb8f40de992d059ee4c000edf6e0
Brian McCallister is responsible for commit 2ecc736bbdc1e98bd88dc9c83c60047bab259108
Brian McCallister is responsible for commit 6be5ed7d668998c7663cdf54813a51d32cec8956
Brian McCallister is responsible for commit a7a5228d2bd47c50578cf1336548315b08f0f22f
Brian McCallister is responsible for commit d5b968845affc533433502444d4f537f2689f8ea
Brian McCallister is responsible for commit 2355601dd732cc19d1f99bcc671fcd2ce73db616
Brian McCallister is responsible for commit 75f5d515ad61a3ff03cc7a88c7076a99c4a75855
Brian McCallister is responsible for commit 984ff7284441b0921f120dadb02903c7c623cb09
Brian McCallister is responsible for commit c6319c55b3b8f99f346a096c661546636235cffb
Brian McCallister is responsible for commit 768eaa4eba0e50886f50d0371f9945dadd34aec5
Brian McCallister is responsible for commit c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161
Brian McCallister is responsible for commit 9dc3ffba50458263f343660dccc6956c089f2cca
Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.

Reverted to commit 2e84e68ec0eb70465a54d41c5a381f4ab452a093

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of fc6ea01bc764d1dbab222b788a682b8c5efcff8b and 2e84e68ec0eb70465a54d41c5a381f4ab452a093:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit fc6ea01bc764d1dbab222b788a682b8c5efcff8b

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision fc6ea01bc764d1dbab222b788a682b8c5efcff8b
Null check was added at revision fc6ea01bc764d1dbab222b788a682b8c5efcff8b
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
Null check was added at revision fc6ea01bc764d1dbab222b788a682b8c5efcff8b
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of b9d0bf60c356e785b56f6e99c55baf393ced7d42 and fc6ea01bc764d1dbab222b788a682b8c5efcff8b:
	--> Added null checks = 3
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1
GitAPIException thrown!
Cannot revert commit 'b9d0bf60c356e785b56f6e99c55baf393ced7d42' because it has 2 parents, only commits with exactly one parent are supported

Reverted to commit 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 936e4a28c843fd59b45025e0c42e3bcebb0ebda1 and 9ec92abc876cc468ba6f972ee9d3bb7469a5b1cd:
	--> Added null checks = 3
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 936e4a28c843fd59b45025e0c42e3bcebb0ebda1

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 6e183e33249d77787c7eb745f2ecb634e439c7e0 and 936e4a28c843fd59b45025e0c42e3bcebb0ebda1:
	--> Added null checks = 3
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 6e183e33249d77787c7eb745f2ecb634e439c7e0

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
Null check was added at revision 6e183e33249d77787c7eb745f2ecb634e439c7e0
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 6e183e33249d77787c7eb745f2ecb634e439c7e0
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 82e6f2dc32b0204a7e508aecba8bf3430eb252c9 and 6e183e33249d77787c7eb745f2ecb634e439c7e0:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 82e6f2dc32b0204a7e508aecba8bf3430eb252c9

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 444c110112d19c459e02f2517e2fe59c262f5aa2 and 82e6f2dc32b0204a7e508aecba8bf3430eb252c9:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 444c110112d19c459e02f2517e2fe59c262f5aa2

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 6813002792199961bc28648b67bf74ddaf1b7995 and 444c110112d19c459e02f2517e2fe59c262f5aa2:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 6813002792199961bc28648b67bf74ddaf1b7995

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of b0499c140380b66a90573b300687409d594c4e5d and 6813002792199961bc28648b67bf74ddaf1b7995:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit b0499c140380b66a90573b300687409d594c4e5d

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 17ec358b7e5a877c968dd0392c83a23cedbd83f1 and b0499c140380b66a90573b300687409d594c4e5d:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 17ec358b7e5a877c968dd0392c83a23cedbd83f1

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of c64d4cd844a47c1728a62edb9a6691ed2e98e175 and 17ec358b7e5a877c968dd0392c83a23cedbd83f1:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit c64d4cd844a47c1728a62edb9a6691ed2e98e175

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 5a67240db8a6977bfa1c226b941f2e9379bb1b48 and c64d4cd844a47c1728a62edb9a6691ed2e98e175:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 5a67240db8a6977bfa1c226b941f2e9379bb1b48

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 7271507604d9f4450db2827e9446aa5da1f736ae and 5a67240db8a6977bfa1c226b941f2e9379bb1b48:
	--> Added null checks = 5
	--> Removed null checks = 0
	--> Null dereferences checked for null = 1

Reverted to commit 7271507604d9f4450db2827e9446aa5da1f736ae

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 7271507604d9f4450db2827e9446aa5da1f736ae
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 7271507604d9f4450db2827e9446aa5da1f736ae
Null check was added at revision 7271507604d9f4450db2827e9446aa5da1f736ae
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 7b3fa0b4d5b608e37a73e5453e25669f658dbf58 and 7271507604d9f4450db2827e9446aa5da1f736ae:
	--> Added null checks = 8
	--> Removed null checks = 0
	--> Null dereferences checked for null = 3

Reverted to commit 7b3fa0b4d5b608e37a73e5453e25669f658dbf58

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 8ad79637cf0067e85e447317e54de4e6352c9076 and 7b3fa0b4d5b608e37a73e5453e25669f658dbf58:
	--> Added null checks = 8
	--> Removed null checks = 0
	--> Null dereferences checked for null = 3

Reverted to commit 8ad79637cf0067e85e447317e54de4e6352c9076

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
Null check was added at revision 8ad79637cf0067e85e447317e54de4e6352c9076
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 6699981d792b90936defeee748e9d9283b55aa78 and 8ad79637cf0067e85e447317e54de4e6352c9076:
	--> Added null checks = 14
	--> Removed null checks = 0
	--> Null dereferences checked for null = 4

Reverted to commit 6699981d792b90936defeee748e9d9283b55aa78

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of de790b9f23a918501d7c6a2ac7ab858fc91f42af and 6699981d792b90936defeee748e9d9283b55aa78:
	--> Added null checks = 14
	--> Removed null checks = 0
	--> Null dereferences checked for null = 4

Reverted to commit de790b9f23a918501d7c6a2ac7ab858fc91f42af

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a and de790b9f23a918501d7c6a2ac7ab858fc91f42af:
	--> Added null checks = 14
	--> Removed null checks = 0
	--> Null dereferences checked for null = 4

Reverted to commit 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 8558ad1480df91f23591e34589b7082e5ec658f7 and 48a9bd9e98631d1f2fb419a37c49ecc76cf5cb2a:
	--> Added null checks = 14
	--> Removed null checks = 0
	--> Null dereferences checked for null = 4

Reverted to commit 8558ad1480df91f23591e34589b7082e5ec658f7

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0 and 8558ad1480df91f23591e34589b7082e5ec658f7:
	--> Added null checks = 14
	--> Removed null checks = 0
	--> Null dereferences checked for null = 4

Reverted to commit daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of d847a64f44435ac3163e57b1a0b02a55a9f90cfe and daea67a25d0053dd5fedcddfa87d9dbc46a6d5a0:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit d847a64f44435ac3163e57b1a0b02a55a9f90cfe

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of a1d4fa74b71e0a88516754d738d173db6417cdab and d847a64f44435ac3163e57b1a0b02a55a9f90cfe:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit a1d4fa74b71e0a88516754d738d173db6417cdab

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 78a4f463e6054d06f0bdca9b2f143f89b1edf13f and a1d4fa74b71e0a88516754d738d173db6417cdab:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit 78a4f463e6054d06f0bdca9b2f143f89b1edf13f

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of b6ea406693ce801f8f6420ef406ba782f4b75f88 and 78a4f463e6054d06f0bdca9b2f143f89b1edf13f:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit b6ea406693ce801f8f6420ef406ba782f4b75f88

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of ec18cb80004e0d773474fa0bd4aeca53d35c180f and b6ea406693ce801f8f6420ef406ba782f4b75f88:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit ec18cb80004e0d773474fa0bd4aeca53d35c180f

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08 and ec18cb80004e0d773474fa0bd4aeca53d35c180f:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of e1cc8b0981dbd7738505e8e68bdfd13310c69b2f and 2a4acf1a4061ea0b56070d57ea073bce3e3c8b08:
	--> Added null checks = 15
	--> Removed null checks = 0
	--> Null dereferences checked for null = 7

Reverted to commit e1cc8b0981dbd7738505e8e68bdfd13310c69b2f

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
Null check was added at revision e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
Null check was added at revision e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
Null check was added at revision e1cc8b0981dbd7738505e8e68bdfd13310c69b2f
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> slots
	--> handler
	--> paramTokenList
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd and e1cc8b0981dbd7738505e8e68bdfd13310c69b2f:
	--> Added null checks = 19
	--> Removed null checks = 0
	--> Null dereferences checked for null = 9

Reverted to commit 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
Null check was added at revision 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
Null check was added at revision 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> slots
	--> handler
	--> paramTokenList
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 6bcf64aacb6abb8f40de992d059ee4c000edf6e0 and 8fa41f6cc24567a8d415b9225f83a9fcc9afaafd:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 6bcf64aacb6abb8f40de992d059ee4c000edf6e0

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 2ecc736bbdc1e98bd88dc9c83c60047bab259108 and 6bcf64aacb6abb8f40de992d059ee4c000edf6e0:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 2ecc736bbdc1e98bd88dc9c83c60047bab259108

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 6be5ed7d668998c7663cdf54813a51d32cec8956 and 2ecc736bbdc1e98bd88dc9c83c60047bab259108:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 6be5ed7d668998c7663cdf54813a51d32cec8956

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of a7a5228d2bd47c50578cf1336548315b08f0f22f and 6be5ed7d668998c7663cdf54813a51d32cec8956:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit a7a5228d2bd47c50578cf1336548315b08f0f22f

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of d5b968845affc533433502444d4f537f2689f8ea and a7a5228d2bd47c50578cf1336548315b08f0f22f:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit d5b968845affc533433502444d4f537f2689f8ea

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 2355601dd732cc19d1f99bcc671fcd2ce73db616 and d5b968845affc533433502444d4f537f2689f8ea:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 2355601dd732cc19d1f99bcc671fcd2ce73db616

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 75f5d515ad61a3ff03cc7a88c7076a99c4a75855 and 2355601dd732cc19d1f99bcc671fcd2ce73db616:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 75f5d515ad61a3ff03cc7a88c7076a99c4a75855

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 984ff7284441b0921f120dadb02903c7c623cb09 and 75f5d515ad61a3ff03cc7a88c7076a99c4a75855:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 984ff7284441b0921f120dadb02903c7c623cb09

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of c6319c55b3b8f99f346a096c661546636235cffb and 984ff7284441b0921f120dadb02903c7c623cb09:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit c6319c55b3b8f99f346a096c661546636235cffb

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 768eaa4eba0e50886f50d0371f9945dadd34aec5 and c6319c55b3b8f99f346a096c661546636235cffb:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit 768eaa4eba0e50886f50d0371f9945dadd34aec5

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> method
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> assignedFrom
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
	--> value
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161 and 768eaa4eba0e50886f50d0371f9945dadd34aec5:
	--> Added null checks = 24
	--> Removed null checks = 0
	--> Null dereferences checked for null = 11

Reverted to commit c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161

Added Bully.java to ./config-magic/ repository source files.
Added CaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added Coercer.java to ./config-magic/ repository source files.
Added Coercible.java to ./config-magic/ repository source files.
Added CommonsConfigSource.java to ./config-magic/ repository source files.
Added Config.java to ./config-magic/ repository source files.
Added ConfigReplacements.java to ./config-magic/ repository source files.
Added ConfigSource.java to ./config-magic/ repository source files.
Added ConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added DataAmount.java to ./config-magic/ repository source files.
Added DataAmountUnit.java to ./config-magic/ repository source files.
Added Default.java to ./config-magic/ repository source files.
Added DefaultCoercibles.java to ./config-magic/ repository source files.
Added DefaultNull.java to ./config-magic/ repository source files.
Added Description.java to ./config-magic/ repository source files.
Added ExactMatchEnumCoercible.java to ./config-magic/ repository source files.
Added Param.java to ./config-magic/ repository source files.
Added Separator.java to ./config-magic/ repository source files.
Added ServletFilterConfigSource.java to ./config-magic/ repository source files.
Added SimplePropertyConfigSource.java to ./config-magic/ repository source files.
Added TimeSpan.java to ./config-magic/ repository source files.
Added BadConfig.java to ./config-magic/ repository source files.
Added CoercionConfig.java to ./config-magic/ repository source files.
Added Config1.java to ./config-magic/ repository source files.
Added Config2.java to ./config-magic/ repository source files.
Added Config3.java to ./config-magic/ repository source files.
Added Config4.java to ./config-magic/ repository source files.
Added Config5.java to ./config-magic/ repository source files.
Added ConfigEnum.java to ./config-magic/ repository source files.
Added EnumeratedConfig1.java to ./config-magic/ repository source files.
Added MultiConfig.java to ./config-magic/ repository source files.
Added Props.java to ./config-magic/ repository source files.
Added ReplacementConfig1.java to ./config-magic/ repository source files.
Added TestArrays.java to ./config-magic/ repository source files.
Added TestBadConfig.java to ./config-magic/ repository source files.
Added TestCaseInsensitiveEnumCoercible.java to ./config-magic/ repository source files.
Added TestClasses.java to ./config-magic/ repository source files.
Added TestCoercion.java to ./config-magic/ repository source files.
Added TestCollections.java to ./config-magic/ repository source files.
Added TestCommonsConfig.java to ./config-magic/ repository source files.
Added TestConfigurationObjectFactory.java to ./config-magic/ repository source files.
Added TestCustomCoercion.java to ./config-magic/ repository source files.
Added TestDataAmount.java to ./config-magic/ repository source files.
Added TestDefaultCoercibles.java to ./config-magic/ repository source files.
Added TestDefaultNull.java to ./config-magic/ repository source files.
Added TestDefaultsPresent.java to ./config-magic/ repository source files.
Added TestEmptyValue.java to ./config-magic/ repository source files.
Added TestEnums.java to ./config-magic/ repository source files.
Added TestExposeMappedReplacements.java to ./config-magic/ repository source files.
Added TestFile.java to ./config-magic/ repository source files.
Added TestMultiConfig.java to ./config-magic/ repository source files.
Added TestNoFinal.java to ./config-magic/ repository source files.
Added TestServletFilterConfigSource.java to ./config-magic/ repository source files.
Added TestTimeSpan.java to ./config-magic/ repository source files.
Added TestVariousPropertyTypes.java to ./config-magic/ repository source files.
Added Wibble.java to ./config-magic/ repository source files.
Added WibbleConfig.java to ./config-magic/ repository source files.
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Bully.java************

Null checks:
args != null?if (args[0] instanceof Class<?>) {
                        return coerceCollection((Class<?>)rawType, (Class<?>)args[0], value, separator);
                    }
                    else if (args[0] instanceof WildcardType) {
                        return coerceClass(type, (WildcardType)args[0], value);
                    }
value == null?return null;
separator == null?value.split(separator == null ? Separator.DEFAULT : separator.value())
ctor != null?result = (Collection)ctor.newInstance();
result == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' container type for value '%s'", containerType, value));
coercer == null?coercer = getCoercerFor(DEFAULT_COERCIBLES, clazz);
coercer == null?throw new IllegalStateException(String.format("Don't know how to handle a '%s' type for value '%s'", clazz, value));
typeCoercer == null?for (Coercible<?> coercible : coercibles) {
                final Coercer<?> coercer = coercible.accept(type);
                if (coercer != null) {
                    mappings.put(type, coercer);
                    typeCoercer = coercer;
                    break;
                }
            }
coercer != null?mappings.put(type, coercer);

Null fields: 
	--> TYPE_COERCIBLES

Null variables: 
In method coerceCollection found:
	--> result
In method coerceArray found:
	--> tokens
Null assignments: 
************ For file CaseInsensitiveEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
In method accept found: 
	--> values
************ For file Coercer.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Coercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CommonsConfigSource.java************

Null checks:
strings == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Config.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161
************ For file ConfigurationObjectFactory.java************

Null checks:
toStringMethod != null?slots.put(toStringMethod, count++);
mappedReplacements != null?throw new RuntimeException("Replacements are not supported for parameterized config methods");
annotation != null?propertyNames = annotation.value();
propertyNames == null?throw new IllegalArgumentException("Method " +
                                                   method.toGenericString() +
                                                   " declares config annotation but no field name!");
mappedReplacements != null?propertyName = applyReplacements(propertyName, mappedReplacements);
value != null?assignedFrom = "property: '" + propertyName + "'";
mapAnnotation == null?throw new IllegalStateException("Neither @Config nor @ConfigReplacements provided, this should not be possible!");
value != null?assignedFrom = "@ConfigReplacements: key '" + key + "'";
value == null?if (hasDefault) {
                value = method.getAnnotation(Default.class).value();
                assignedFrom = "annotation: @Default";

                logger.info("Assigning default value [{}] for {} on [{}#{}()]",
                            new Object[] { value, propertyNames, method.getDeclaringClass().getName(), method.getName() });
            }
            else if (hasDefaultNull) {
                logger.info("Assigning null default value for {} on [{}#{}()]",
                            new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                assignedFrom = "annotation: @DefaultNull";
            }
            else {
                // Final try: Is the method is actually callable?
                if (!Modifier.isAbstract(method.getModifiers())) {
                    useMethod = true;
                    assignedFrom = "method: '" + method.getName() + "()'";
                    logger.info("Using method itself for {} on [{}#{}()]",
                                new Object[] { propertyNames, method.getDeclaringClass().getName(), method.getName() });
                }
                else {
                    throw new IllegalArgumentException(String.format("No value present for '%s' in [%s]",
                            prettyPrint(propertyNames, mappedReplacements),
                            method.toGenericString()));
                }
            }
annotationValues == null?throw new IllegalArgumentException("Method " +
                                               method.toGenericString() +
                                               " declares config annotation but no field name!");
values == null?return "";
mappedReplacements != null?sb.append(" translated to [");
toStringValue == null?final StringBuilder sb = new StringBuilder("value: ");
finalValue != null?sb.append(finalValue.toString());
toStringValue == null?final StringBuilder sb = new StringBuilder(method.getName());
value != null?logger.info("Assigning value [{}] for [{}] on [{}#{}()]",
                                    new Object[] { value, property, method.getDeclaringClass().getName(), method.getName() });
toStringValue == null?toStringValue = method.getName() + ": " + super.toString();
toStringValue == null?final StringBuilder sb = new StringBuilder();

Null fields: 
	--> slots
	--> handler
	--> paramTokenList
	--> config
	--> bully
	--> properties
	--> defaultValue
	--> callbacks
	--> finalValue

Null variables: 
In method buildSimple found:
	--> assignedFrom
In method internalBuild found:
	--> fixedMap
In method buildParameterized found:
	--> defaultValue
Null assignments: 
In method buildSimple found: 
	--> value
************ For file DataAmount.java************

Null checks:
obj == null?return false;

Null fields: 
	--> unit

Null variables: 
Null assignments: 
************ For file DataAmountUnit.java************

Null checks:

Null fields: 
	--> symbol

Null variables: 
Null assignments: 
************ For file Default.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DefaultCoercibles.java************

Null checks:
candidate != null?final Method valueOfMethod = candidate;
value == null?return value == null ? null : valueOfMethod.invoke(null, value);
value == null?return value == null ? null : ctor.newInstance(value);
value != null?return value != null ? Boolean.valueOf(value) : null;
value != null?return value != null ? Byte.valueOf(value) : null;
value != null?return value != null ? Short.valueOf(value) : null;
value != null?return value != null ? Integer.valueOf(value) : null;
value != null?return value != null ? Long.valueOf(value) : null;
value != null?return value != null ? Float.valueOf(value) : null;
value != null?return value != null ? Double.valueOf(value) : null;
value != null?return value != null ? URI.create(value) : null;

Null fields: 

Null variables: 
In method accept found:
	--> coercer
Null assignments: 
In method accept found: 
	--> candidate
	--> coercer
************ For file DefaultNull.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Description.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ExactMatchEnumCoercible.java************

Null checks:
value == null?return null;

Null fields: 

Null variables: 
Null assignments: 
************ For file Param.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Separator.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ServletFilterConfigSource.java************

Null checks:

Null fields: 
	--> filterConfig

Null variables: 
Null assignments: 
************ For file SimplePropertyConfigSource.java************

Null checks:

Null fields: 
	--> props

Null variables: 
Null assignments: 
************ For file TimeSpan.java************

Null checks:
unit == null?throw new IllegalArgumentException(String.format("%s is not a valid time unit in %s", type, spec));
obj == null?return false;

Null fields: 
	--> millis
	--> unit
	--> period

Null variables: 
Null assignments: 
************ For file BadConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CoercionConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config2.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config3.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config4.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Config5.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ConfigEnum.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file EnumeratedConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MultiConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Props.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ReplacementConfig1.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestArrays.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestBadConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCaseInsensitiveEnumCoercible.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestClasses.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCoercion.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestCollections.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestCommonsConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestConfigurationObjectFactory.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestCustomCoercion.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDataAmount.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultCoercibles.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestDefaultNull.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestDefaultsPresent.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEmptyValue.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestEnums.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestExposeMappedReplacements.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestFile.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestMultiConfig.java************

Null checks:

Null fields: 
	--> c

Null variables: 
Null assignments: 
In method tearDown found: 
	--> this.c
************ For file TestNoFinal.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestServletFilterConfigSource.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file TestTimeSpan.java************

Null checks:

Null fields: 
	--> cof

Null variables: 
Null assignments: 
In method tearDown found: 
	--> cof
************ For file TestVariousPropertyTypes.java************

Null checks:

Null fields: 
	--> c
	--> sc

Null variables: 
Null assignments: 
************ For file Wibble.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file WibbleConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 

Diff of 9dc3ffba50458263f343660dccc6956c089f2cca and c41fd8b0e607ba7e66c6a7eca7500cc9cfd13161:
	--> Added null checks = 25
	--> Removed null checks = 0
	--> Null dereferences checked for null = 14
Null checks found in initial commit -- added at creation of the repository.
****Analysis complete for first commit****
Brian McCallister added null count = 25 in repository config-magic
Brian McCallister removed null count = 0 in repository config-magic
Brian McCallister deref count = 14 in repository config-magic
GitAPIException thrown!
Cannot revert commit '9dc3ffba50458263f343660dccc6956c089f2cca' because it has 0 parents, only commits with exactly one parent are supported
