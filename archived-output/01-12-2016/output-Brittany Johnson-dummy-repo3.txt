dummy-repo3 -- brittjay0104 -- Brittany Johnson
0
Brittany Johnson is responsible for commit 7b5c0f8636370f9c903d5cda5353949c5668e4dd
Brittany Johnson is responsible for commit 541010765841f100ae169617bef0b74658fcf45e
Brittany Johnson is responsible for commit 81e8e10db8eeb72947dce3a93ccf321b20fae0c5
Brittany Johnson is responsible for commit 8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b
Brittany Johnson is responsible for commit 1537817083c8156db730090728e770346c60e2de
Brittany Johnson is responsible for commit ca6943e2c0d57ca0f7f93b50c43a66c67bb75584
Brittany Johnson is responsible for commit adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe
Brittany Johnson is responsible for commit 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd
Brittany Johnson is responsible for commit b1eb5c7913a48fc32b14ac574bb083bc4b8b420f
Brittany Johnson is responsible for commit 906f7aaff4b72be59893c7d19561680cf9eec15d
Brittany Johnson is responsible for commit db0ec14a3940e0b2143e3ef5388e24df349cdab8
Brittany Johnson is responsible for commit 23de72296d40ecff16cc257be2895884dc0bfbed
Brittany Johnson is responsible for commit 1103532657974d248d3fb11435d24517038aaee4
Brittany Johnson is responsible for commit 365cc50fb28186309bcba1a14a373a06d349a51d
Brittany Johnson is responsible for commit 6a9bda47c7c18265dcc682be5513a82db528cdfd
Brittany Johnson is responsible for commit 8cf75c0547a098c00681bfde63fc246f4e278696
Brittany Johnson is responsible for commit 6cc49806961fcbb536f5f386d3bdd0724f6beaff
Brittany Johnson is responsible for commit 48ac7505f6c0c6a9c33c56514a6dcab2875917fc
Brittany Johnson is responsible for commit 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db
Brittany Johnson is responsible for commit f29e26e40d3a244499ae41fb825264ffa230815b
Brittany Johnson is responsible for commit da6b1b03cc7d21c11e543c8549fcfda5b7511583
Brittany Johnson is responsible for commit dcf67baa545756ab03d2000c4edf326e09009f4e
Added Generics.java to .\dummy-repo3\ repository source files.
Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 ************ ANALYZING FOR USAGE PATTERN ADDITION ************


****Parsing for addition at revision 7b5c0f8636370f9c903d5cda5353949c5668e4dd****

Added Generics.java to .\dummy-repo3\ repository source files.
Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> Generics.java

********Null checks found in Generics.java********
********Collections usage found in Generics.java********
********Optional Usage found in Generics.java********
********Catch Blocks found in Generics.java********
Generic field: private T t;
Generic method declaration: Comparable<T>￿maximum
Type argument: Number
Generic field: private T t;
Diff line --> +++ b/Generics.java
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Generic method: Comparable<T>￿maximum
Diff line --> +++ b/Generics.java
Usage pattern --> Comparable<T>￿maximum
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> Comparable<T>￿maximum
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> Comparable<T>￿maximum
Diff line --> +
Usage pattern --> Comparable<T>￿maximum
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> Comparable<T>￿maximum
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> Comparable<T>￿maximum
Diff line --> +
Usage pattern --> Comparable<T>￿maximum
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> Comparable<T>￿maximum
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> Comparable<T>￿maximum
Diff line --> +
Usage pattern --> Comparable<T>￿maximum
Generic invocation: Number￿this.<Number>method(new Integer(100))
Diff line --> +++ b/Generics.java
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Generic parameter: T￿t￿add
Generic parameter: T￿item￿method
Generic parameter: T￿x￿maximum
Generic parameter: T￿y￿maximum
Generic parameter: T￿z￿maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +++ b/Generics.java
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +++ b/Generics.java
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Generic variable declaration: List<T>￿list￿method
Generic variable declaration: T￿max￿maximum
Generic variable declaration: Box<Integer>￿integerBox￿main
Generic variable declaration: Box<String>￿stringBox￿main
Generic variable declaration: List<String>￿anEmptyStringList￿main
Diff line --> +++ b/Generics.java
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +++ b/Generics.java
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +++ b/Generics.java
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +++ b/Generics.java
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +  Box<Integer> integerBox = new Box<Integer>();
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     Box<String> stringBox = new Box<String>();
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     integerBox.add(new Integer(10));
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     stringBox.add(new String("Hello World"));
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("Integer Value :%d\n\n", integerBox.get());
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf("String Value :%s\n", stringBox.get());
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> Box<Integer>￿integerBox￿main
Var Declaration Pattern 1 (type) --> Box<Integer>
Var Declaration Pattern 2 (variable) --> integerBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> Box<String>￿stringBox￿main
Var Declaration Pattern 1 (type) --> Box<String>
Var Declaration Pattern 2 (variable) --> stringBox
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 7b5c0f8636370f9c903d5cda5353949c5668e4dd and 541010765841f100ae169617bef0b74658fcf45e:
	--> Added generic fields = 0
	--> Added generic methods with type bounds = 0
 	--> Added generic invocations = 0
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 7b5c0f8636370f9c903d5cda5353949c5668e4dd to 541010765841f100ae169617bef0b74658fcf45e


****Parsing for addition at revision 541010765841f100ae169617bef0b74658fcf45e****

Added Generics.java to .\dummy-repo3\ repository source files.
Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> Generics.java

********Null checks found in Generics.java********
********Collections usage found in Generics.java********
********Optional Usage found in Generics.java********
********Catch Blocks found in Generics.java********
Generic field: private T t;
Generic method declaration: Comparable<T>￿maximum
Type argument: Number
Generic field: private T t;
Diff line --> +++ b/Generics.java
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   {
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +         max = z; // z is the largest now
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +      return max; // returns the largest object
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       double sum = 0;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       for(Number n : list){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +           sum += n.doubleValue();
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       return sum;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       for(Object obj : list){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +       }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Generic method: Comparable<T>￿maximum
Diff line --> +++ b/Generics.java
Usage pattern --> Comparable<T>￿maximum
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> Comparable<T>￿maximum
Generics pattern was added at revision 541010765841f100ae169617bef0b74658fcf45e
Diff line --> +   {
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +         max = z; // z is the largest now
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +      return max; // returns the largest object
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       double sum = 0;
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       for(Number n : list){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +           sum += n.doubleValue();
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       return sum;
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       for(Object obj : list){
Usage pattern --> Comparable<T>￿maximum
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> Comparable<T>￿maximum
Diff line --> +       }
Usage pattern --> Comparable<T>￿maximum
Diff line --> +   }
Usage pattern --> Comparable<T>￿maximum
Generic invocation: Number￿this.<Number>method(new Integer(100))
Diff line --> +++ b/Generics.java
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   {
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +         max = z; // z is the largest now
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +      return max; // returns the largest object
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       double sum = 0;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       for(Number n : list){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +           sum += n.doubleValue();
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       return sum;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       for(Object obj : list){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +       }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Generic parameter: T￿t￿add
Generic parameter: T￿item￿method
Generic parameter: T￿x￿maximum
Generic parameter: T￿y￿maximum
Generic parameter: T￿z￿maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +++ b/Generics.java
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +++ b/Generics.java
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   {
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   {
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   {
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   {
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   {
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       double sum = 0;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       double sum = 0;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       double sum = 0;
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       double sum = 0;
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       double sum = 0;
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Number n : list){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       for(Number n : list){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       for(Number n : list){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Number n : list){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Number n : list){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       return sum;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       return sum;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       return sum;
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       return sum;
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       return sum;
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +       }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +       }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿x￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> x
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿y￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> y
Parameter Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> T￿z￿maximum
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> z
Parameter Pattern 3 (method) --> maximum
Generic variable declaration: List<T>￿list￿method
Generic variable declaration: T￿max￿maximum
Generic variable declaration: List<String>￿anEmptyStringList￿main
Diff line --> +++ b/Generics.java
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +++ b/Generics.java
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +++ b/Generics.java
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +  // determines the largest of three Comparable objects
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   public static <T extends Comparable<T>> T maximum(T x, T y, T z)
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   {
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   {
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   {
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      T max = x; // assume x is initially the largest
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      if ( y.compareTo( max ) > 0 ){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +         max = y; // y is the largest so far
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      if ( z.compareTo( max ) > 0 ){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +         max = z; // z is the largest now
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +         max = z; // z is the largest now
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +         max = z; // z is the largest now
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +      return max; // returns the largest object
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +      return max; // returns the largest object
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +      return max; // returns the largest object
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   public static double sum(List<? extends Number> list){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       double sum = 0;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       double sum = 0;
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       double sum = 0;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       for(Number n : list){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       for(Number n : list){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       for(Number n : list){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +           sum += n.doubleValue();
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +           sum += n.doubleValue();
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +           sum += n.doubleValue();
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       return sum;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       return sum;
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       return sum;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   public static void printData(List<?> list){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       for(Object obj : list){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       for(Object obj : list){
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       for(Object obj : list){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +           System.out.print(obj + "::");
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +       }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +       }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +       }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   }
Usage pattern --> T￿max￿maximum
Var Declaration Pattern 1 (type) --> T
Var Declaration Pattern 2 (variable) --> max
Var Declaration Pattern 3 (method) --> maximum
Diff line --> +   }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 541010765841f100ae169617bef0b74658fcf45e and 81e8e10db8eeb72947dce3a93ccf321b20fae0c5:
	--> Added generic fields = 0
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 0
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 541010765841f100ae169617bef0b74658fcf45e to 81e8e10db8eeb72947dce3a93ccf321b20fae0c5


****Parsing for addition at revision 81e8e10db8eeb72947dce3a93ccf321b20fae0c5****

Added Generics.java to .\dummy-repo3\ repository source files.
Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> Generics.java

********Null checks found in Generics.java********
********Collections usage found in Generics.java********
********Optional Usage found in Generics.java********
********Catch Blocks found in Generics.java********
Generic field: private T t;
Type argument: Number
Generic field: private T t;
Diff line --> +++ b/Generics.java
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +public class Box<T> {
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  private T t;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Generics pattern was added at revision 81e8e10db8eeb72947dce3a93ccf321b20fae0c5
Diff line --> +  private Object o;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  public void add(T t) {
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +    this.t = t;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  public T get() {
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +    return t;
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  public <T> void method(T item){
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  public static void main(String[] args) {
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +  }
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Diff line --> +}g
Usage pattern --> private T t;
Field Pattern 1 --> private T t;
Generic invocation: Number￿this.<Number>method(new Integer(100))
Diff line --> +++ b/Generics.java
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +public class Box<T> {
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  private T t;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  private Object o;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  public void add(T t) {
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +    this.t = t;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  public T get() {
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +    return t;
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  public <T> void method(T item){
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  public static void main(String[] args) {
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Generics pattern was added at revision 81e8e10db8eeb72947dce3a93ccf321b20fae0c5
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +  }
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Diff line --> +}g
Usage pattern --> Number￿this.<Number>method(new Integer(100))
Generic parameter: T￿t￿add
Generic parameter: T￿item￿method
Diff line --> +++ b/Generics.java
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +++ b/Generics.java
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +public class Box<T> {
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +public class Box<T> {
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  private T t;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  private T t;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  private Object o;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  private Object o;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  public void add(T t) {
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  public void add(T t) {
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +    this.t = t;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +    this.t = t;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  public T get() {
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  public T get() {
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +    return t;
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +    return t;
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  public <T> void method(T item){
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  public <T> void method(T item){
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  public static void main(String[] args) {
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  public static void main(String[] args) {
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +  }
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Diff line --> +}g
Usage pattern --> T￿t￿add
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> t
Parameter Pattern 3 (method) --> add
Diff line --> +}g
Usage pattern --> T￿item￿method
Parameter Pattern 1 (type) --> T
Parameter Pattern 2 (variable) --> item
Parameter Pattern 3 (method) --> method
Generic variable declaration: List<T>￿list￿method
Generic variable declaration: List<String>￿anEmptyStringList￿main
Diff line --> +++ b/Generics.java
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +++ b/Generics.java
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +public class Box<T> {
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +public class Box<T> {
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  private T t;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  private T t;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  private Object o;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  private Object o;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  public void add(T t) {
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  public void add(T t) {
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +    this.t = t;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +    this.t = t;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  public T get() {
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  public T get() {
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +    return t;
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +    return t;
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  public <T> void method(T item){
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  public <T> void method(T item){
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   List<T> list = new ArrayList<T>();
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  public static void main(String[] args) {
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  public static void main(String[] args) {
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +     System.out.printf( "Max of %d, %d and %d is %d\n\n",
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +             3, 4, 5, maximum( 3, 4, 5 ) );
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> + System.out.printf( "Maxm of %.1f,%.1f and %.1f is %.1f\n\n",
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +              6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ) );
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> + System.out.printf( "Max of %s, %s and %s is %s\n","pear",
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +   "apple", "orange", maximum( "pear", "apple", "orange" ) );
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  this.<Number>method(new Integer(100));
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  List<String> anEmptyStringList = Collections.<String>emptyList();
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +  }
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +  }
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main
Diff line --> +}g
Usage pattern --> List<T>￿list￿method
Var Declaration Pattern 1 (type) --> List<T>
Var Declaration Pattern 2 (variable) --> list
Var Declaration Pattern 3 (method) --> method
Diff line --> +}g
Usage pattern --> List<String>￿anEmptyStringList￿main
Var Declaration Pattern 1 (type) --> List<String>
Var Declaration Pattern 2 (variable) --> anEmptyStringList
Var Declaration Pattern 3 (method) --> main

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 81e8e10db8eeb72947dce3a93ccf321b20fae0c5 and 8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 81e8e10db8eeb72947dce3a93ccf321b20fae0c5 to 8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b


****Parsing for addition at revision 8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b and 1537817083c8156db730090728e770346c60e2de:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0
GitAPIException thrown!
Cannot revert commit '8ae6f1b662a3b1bce3bc6d68a9280e51aa81b65b' because it has 2 parents, only commits with exactly one parent are supported

****Parsing for addition at revision 1537817083c8156db730090728e770346c60e2de****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + Map<String,Integer> map;
Usage pattern --> value == null￿return null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + Map<String,Integer> map;
Usage pattern --> names == null￿return null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> jo == null￿break;
Diff line --> + Map<String,Integer> map;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + Map<String,Integer> map;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public int getVal(String s) {
Usage pattern --> value == null￿return null;
Diff line --> + public int getVal(String s) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public int getVal(String s) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public int getVal(String s) {
Usage pattern --> names == null￿return null;
Diff line --> + public int getVal(String s) {
Usage pattern --> jo == null￿break;
Diff line --> + public int getVal(String s) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public int getVal(String s) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return map.get(s);
Usage pattern --> value == null￿return null;
Diff line --> +  return map.get(s);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return map.get(s);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return map.get(s);
Usage pattern --> names == null￿return null;
Diff line --> +  return map.get(s);
Usage pattern --> jo == null￿break;
Diff line --> +  return map.get(s);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return map.get(s);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + }
Usage pattern --> value == null￿return null;
Diff line --> + }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + }
Usage pattern --> names == null￿return null;
Diff line --> + }
Usage pattern --> jo == null￿break;
Diff line --> + }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public Boolean doSOmething() {
Usage pattern --> value == null￿return null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public Boolean doSOmething() {
Usage pattern --> names == null￿return null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> jo == null￿break;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public Boolean doSOmething() {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return null;
Usage pattern --> value == null￿return null;
Diff line --> +  return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return null;
Usage pattern --> names == null￿return null;
Diff line --> +  return null;
Usage pattern --> jo == null￿break;
Diff line --> +  return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + }
Usage pattern --> value == null￿return null;
Diff line --> + }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + }
Usage pattern --> names == null￿return null;
Diff line --> + }
Usage pattern --> jo == null￿break;
Diff line --> + }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> value == null￿return null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> names == null￿return null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> jo == null￿break;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> value == null￿return null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> names == null￿return null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> jo == null￿break;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return retVal;
Usage pattern --> value == null￿return null;
Diff line --> +  return retVal;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return retVal;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return retVal;
Usage pattern --> names == null￿return null;
Diff line --> +  return retVal;
Usage pattern --> jo == null￿break;
Diff line --> +  return retVal;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return retVal;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +}
Usage pattern --> value == null￿return null;
Diff line --> +}
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +}
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +}
Usage pattern --> names == null￿return null;
Diff line --> +}
Usage pattern --> jo == null￿break;
Diff line --> +}
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +}
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 1537817083c8156db730090728e770346c60e2de and ca6943e2c0d57ca0f7f93b50c43a66c67bb75584:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 1537817083c8156db730090728e770346c60e2de to ca6943e2c0d57ca0f7f93b50c43a66c67bb75584


****Parsing for addition at revision ca6943e2c0d57ca0f7f93b50c43a66c67bb75584****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of ca6943e2c0d57ca0f7f93b50c43a66c67bb75584 and adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision ca6943e2c0d57ca0f7f93b50c43a66c67bb75584 to adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe


****Parsing for addition at revision adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********
Catch block -- getValue￿catch (NullPointerException e) 
Diff line --> +++ b/Test.java
Usage pattern --> getValue￿catch (NullPointerException e) 
Diff line --> +   Object o = new Object();
Usage pattern --> getValue￿catch (NullPointerException e) 
Diff line --> +
Usage pattern --> getValue￿catch (NullPointerException e) 

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe and 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision adcd7da1cb4a5da6f00d6402e7ad55e99ca6e5fe to 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd


****Parsing for addition at revision 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********
Catch block -- getValue￿catch (NullPointerException e) 
Diff line --> +++ b/Test.java
Usage pattern --> getValue￿catch (NullPointerException e) 
Diff line --> +  catch (NullPointerException e){
Usage pattern --> getValue￿catch (NullPointerException e) 
Null usage pattern was added at revision 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd and b1eb5c7913a48fc32b14ac574bb083bc4b8b420f:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 8bf78f65b9d7091fcf5801ccc9749fa95cad65dd to b1eb5c7913a48fc32b14ac574bb083bc4b8b420f


****Parsing for addition at revision b1eb5c7913a48fc32b14ac574bb083bc4b8b420f****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of b1eb5c7913a48fc32b14ac574bb083bc4b8b420f and 906f7aaff4b72be59893c7d19561680cf9eec15d:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision b1eb5c7913a48fc32b14ac574bb083bc4b8b420f to 906f7aaff4b72be59893c7d19561680cf9eec15d


****Parsing for addition at revision 906f7aaff4b72be59893c7d19561680cf9eec15d****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added Test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> Test.java

********Null checks found in Test.java********
********Collections usage found in Test.java********
********Optional Usage found in Test.java********
********Catch Blocks found in Test.java********

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 906f7aaff4b72be59893c7d19561680cf9eec15d and db0ec14a3940e0b2143e3ef5388e24df349cdab8:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 906f7aaff4b72be59893c7d19561680cf9eec15d to db0ec14a3940e0b2143e3ef5388e24df349cdab8


****Parsing for addition at revision db0ec14a3940e0b2143e3ef5388e24df349cdab8****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        char c = null;
Usage pattern --> value == null￿return null;
Diff line --> +        char c = null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        char c = null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        char c = null;
Usage pattern --> names == null￿return null;
Diff line --> +        char c = null;
Usage pattern --> jo == null￿break;
Diff line --> +        char c = null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        char c = null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            c = null
Usage pattern --> value == null￿return null;
Diff line --> +            c = null
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            c = null
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            c = null
Usage pattern --> names == null￿return null;
Diff line --> +            c = null
Usage pattern --> jo == null￿break;
Diff line --> +            c = null
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            c = null
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (object != null){
Usage pattern --> value == null￿return null;
Diff line --> +            if (object != null){
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (object != null){
Usage pattern --> object != null￿String string = object.toString();
Null check pattern was added at revision db0ec14a3940e0b2143e3ef5388e24df349cdab8
Diff line --> +            if (object != null){
Usage pattern --> names == null￿return null;
Diff line --> +            if (object != null){
Usage pattern --> jo == null￿break;
Diff line --> +            if (object != null){
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (object != null){
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             String string = object.toString();
Usage pattern --> value == null￿return null;
Diff line --> +             String string = object.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             String string = object.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             String string = object.toString();
Usage pattern --> names == null￿return null;
Diff line --> +             String string = object.toString();
Usage pattern --> jo == null￿break;
Diff line --> +             String string = object.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             String string = object.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> value == null￿return null;
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names == null￿return null;
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo == null￿break;
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +              sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +              sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +              sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              int length = string.length();
Usage pattern --> value == null￿return null;
Diff line --> +              int length = string.length();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              int length = string.length();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              int length = string.length();
Usage pattern --> names == null￿return null;
Diff line --> +              int length = string.length();
Usage pattern --> jo == null￿break;
Diff line --> +              int length = string.length();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              int length = string.length();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> value == null￿return null;
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> names == null￿return null;
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> jo == null￿break;
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              for (int j = 0; j < length; j += 1) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               char c = string.charAt(j);
Usage pattern --> value == null￿return null;
Diff line --> +               char c = string.charAt(j);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               char c = string.charAt(j);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               char c = string.charAt(j);
Usage pattern --> names == null￿return null;
Diff line --> +               char c = string.charAt(j);
Usage pattern --> jo == null￿break;
Diff line --> +               char c = string.charAt(j);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               char c = string.charAt(j);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> value == null￿return null;
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> names == null￿return null;
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> jo == null￿break;
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               if (c >= ' ' && c != '"') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                sb.append(c);
Usage pattern --> value == null￿return null;
Diff line --> +                sb.append(c);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                sb.append(c);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                sb.append(c);
Usage pattern --> names == null￿return null;
Diff line --> +                sb.append(c);
Usage pattern --> jo == null￿break;
Diff line --> +                sb.append(c);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                sb.append(c);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               }
Usage pattern --> value == null￿return null;
Diff line --> +               }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               }
Usage pattern --> names == null￿return null;
Diff line --> +               }
Usage pattern --> jo == null￿break;
Diff line --> +               }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              }
Usage pattern --> value == null￿return null;
Diff line --> +              }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              }
Usage pattern --> names == null￿return null;
Diff line --> +              }
Usage pattern --> jo == null￿break;
Diff line --> +              }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +              sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +              sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +              sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             } else {
Usage pattern --> value == null￿return null;
Diff line --> +             } else {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             } else {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             } else {
Usage pattern --> names == null￿return null;
Diff line --> +             } else {
Usage pattern --> jo == null￿break;
Diff line --> +             } else {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             } else {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +              sb.append(string);
Usage pattern --> value == null￿return null;
Diff line --> +              sb.append(string);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +              sb.append(string);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +              sb.append(string);
Usage pattern --> names == null￿return null;
Diff line --> +              sb.append(string);
Usage pattern --> jo == null￿break;
Diff line --> +              sb.append(string);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +              sb.append(string);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             }
Usage pattern --> value == null￿return null;
Diff line --> +             }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             }
Usage pattern --> names == null￿return null;
Diff line --> +             }
Usage pattern --> jo == null￿break;
Diff line --> +             }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + Map<String,Integer> map;
Usage pattern --> value == null￿return null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + Map<String,Integer> map;
Usage pattern --> names == null￿return null;
Diff line --> + Map<String,Integer> map;
Usage pattern --> jo == null￿break;
Diff line --> + Map<String,Integer> map;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + Map<String,Integer> map;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public int getVal(String s) {
Usage pattern --> value == null￿return null;
Diff line --> + public int getVal(String s) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public int getVal(String s) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public int getVal(String s) {
Usage pattern --> names == null￿return null;
Diff line --> + public int getVal(String s) {
Usage pattern --> jo == null￿break;
Diff line --> + public int getVal(String s) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public int getVal(String s) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return map.get(s);
Usage pattern --> value == null￿return null;
Diff line --> +  return map.get(s);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return map.get(s);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return map.get(s);
Usage pattern --> names == null￿return null;
Diff line --> +  return map.get(s);
Usage pattern --> jo == null￿break;
Diff line --> +  return map.get(s);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return map.get(s);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + }
Usage pattern --> value == null￿return null;
Diff line --> + }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + }
Usage pattern --> names == null￿return null;
Diff line --> + }
Usage pattern --> jo == null￿break;
Diff line --> + }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public Boolean doSOmething() {
Usage pattern --> value == null￿return null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public Boolean doSOmething() {
Usage pattern --> names == null￿return null;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> jo == null￿break;
Diff line --> + public Boolean doSOmething() {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public Boolean doSOmething() {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return null;
Usage pattern --> value == null￿return null;
Diff line --> +  return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return null;
Usage pattern --> names == null￿return null;
Diff line --> +  return null;
Usage pattern --> jo == null￿break;
Diff line --> +  return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + }
Usage pattern --> value == null￿return null;
Diff line --> + }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + }
Usage pattern --> names == null￿return null;
Diff line --> + }
Usage pattern --> jo == null￿break;
Diff line --> + }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> value == null￿return null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> names == null￿return null;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> jo == null￿break;
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + public boolean doSomethingElse() {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> value == null￿return null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> names == null￿return null;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> jo == null￿break;
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  Boolean retVal = doSOmething();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  return retVal;
Usage pattern --> value == null￿return null;
Diff line --> +  return retVal;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  return retVal;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  return retVal;
Usage pattern --> names == null￿return null;
Diff line --> +  return retVal;
Usage pattern --> jo == null￿break;
Diff line --> +  return retVal;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  return retVal;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +}
Usage pattern --> value == null￿return null;
Diff line --> +}
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +}
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +}
Usage pattern --> names == null￿return null;
Diff line --> +}
Usage pattern --> jo == null￿break;
Diff line --> +}
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +}
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of db0ec14a3940e0b2143e3ef5388e24df349cdab8 and 23de72296d40ecff16cc257be2895884dc0bfbed:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision db0ec14a3940e0b2143e3ef5388e24df349cdab8 to 23de72296d40ecff16cc257be2895884dc0bfbed


****Parsing for addition at revision 23de72296d40ecff16cc257be2895884dc0bfbed****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 23de72296d40ecff16cc257be2895884dc0bfbed and 1103532657974d248d3fb11435d24517038aaee4:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 23de72296d40ecff16cc257be2895884dc0bfbed to 1103532657974d248d3fb11435d24517038aaee4


****Parsing for addition at revision 1103532657974d248d3fb11435d24517038aaee4****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 1103532657974d248d3fb11435d24517038aaee4 and 365cc50fb28186309bcba1a14a373a06d349a51d:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 1103532657974d248d3fb11435d24517038aaee4 to 365cc50fb28186309bcba1a14a373a06d349a51d


****Parsing for addition at revision 365cc50fb28186309bcba1a14a373a06d349a51d****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 365cc50fb28186309bcba1a14a373a06d349a51d and 6a9bda47c7c18265dcc682be5513a82db528cdfd:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 365cc50fb28186309bcba1a14a373a06d349a51d to 6a9bda47c7c18265dcc682be5513a82db528cdfd


****Parsing for addition at revision 6a9bda47c7c18265dcc682be5513a82db528cdfd****

Added NullObjectPattern_test.java to .\dummy-repo3\ repository source files.
Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> NullObjectPattern_test.java

********Null checks found in NullObjectPattern_test.java********
********Collections usage found in NullObjectPattern_test.java********
********Optional Usage found in NullObjectPattern_test.java********
********Catch Blocks found in NullObjectPattern_test.java********
NODP in play! --> NullObjectPattern_test￿instance￿return instance;

NODP --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +++ b/NullObjectPattern_test.java
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +package node_visitor;
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +public class NullObjectPattern_test extends List {
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> + private static final NullObjectPattern_test instance = new NullObjectPattern_test();
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   private NullObjectPattern_test() { }
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   public static NullObjectPattern_test Singleton()
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   {
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +     return instance;
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   }
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   public List getTail()
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   {
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +     return this;
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +   }
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +
Usage pattern --> NullObjectPattern_test￿instance￿return instance;
Diff line --> +}
Usage pattern --> NullObjectPattern_test￿instance￿return instance;

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 6a9bda47c7c18265dcc682be5513a82db528cdfd and 8cf75c0547a098c00681bfde63fc246f4e278696:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 6a9bda47c7c18265dcc682be5513a82db528cdfd to 8cf75c0547a098c00681bfde63fc246f4e278696


****Parsing for addition at revision 8cf75c0547a098c00681bfde63fc246f4e278696****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> value == null￿return null;
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> names == null￿return null;
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> jo == null￿break;
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             Optional<Integer> possible = Optional.of(5);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> value == null￿return null;
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> names == null￿return null;
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> jo == null￿break;
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             possible.isPresent(); // returns true
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             possible.get(); // returns 5
Usage pattern --> value == null￿return null;
Diff line --> +             possible.get(); // returns 5
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             possible.get(); // returns 5
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             possible.get(); // returns 5
Usage pattern --> names == null￿return null;
Diff line --> +             possible.get(); // returns 5
Usage pattern --> jo == null￿break;
Diff line --> +             possible.get(); // returns 5
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             possible.get(); // returns 5
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 8cf75c0547a098c00681bfde63fc246f4e278696 and 6cc49806961fcbb536f5f386d3bdd0724f6beaff:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 8cf75c0547a098c00681bfde63fc246f4e278696 to 6cc49806961fcbb536f5f386d3bdd0724f6beaff


****Parsing for addition at revision 6cc49806961fcbb536f5f386d3bdd0724f6beaff****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               // do something
Usage pattern --> value == null￿return null;
Diff line --> +               // do something
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               // do something
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               // do something
Usage pattern --> names == null￿return null;
Diff line --> +               // do something
Usage pattern --> jo == null￿break;
Diff line --> +               // do something
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               // do something
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> value == null￿return null;
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> names == null￿return null;
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> jo == null￿break;
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +             java.util.List<String> a = java.util.Collections.emptyList();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 6cc49806961fcbb536f5f386d3bdd0724f6beaff and 48ac7505f6c0c6a9c33c56514a6dcab2875917fc:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 6cc49806961fcbb536f5f386d3bdd0724f6beaff to 48ac7505f6c0c6a9c33c56514a6dcab2875917fc


****Parsing for addition at revision 48ac7505f6c0c6a9c33c56514a6dcab2875917fc****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  * adding another commit with a comment
Usage pattern --> value == null￿return null;
Diff line --> +  * adding another commit with a comment
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  * adding another commit with a comment
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  * adding another commit with a comment
Usage pattern --> names == null￿return null;
Diff line --> +  * adding another commit with a comment
Usage pattern --> jo == null￿break;
Diff line --> +  * adding another commit with a comment
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  * adding another commit with a comment
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static void main(String[] args)
Usage pattern --> value == null￿return null;
Diff line --> +    public static void main(String[] args)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static void main(String[] args)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static void main(String[] args)
Usage pattern --> names == null￿return null;
Diff line --> +    public static void main(String[] args)
Usage pattern --> jo == null￿break;
Diff line --> +    public static void main(String[] args)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static void main(String[] args)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    {
Usage pattern --> value == null￿return null;
Diff line --> +    {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    {
Usage pattern --> names == null￿return null;
Diff line --> +    {
Usage pattern --> jo == null￿break;
Diff line --> +    {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> value == null￿return null;
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> names == null￿return null;
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> jo == null￿break;
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        // TODO Auto-generated method stub
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        try
Usage pattern --> value == null￿return null;
Diff line --> +        try
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        try
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        try
Usage pattern --> names == null￿return null;
Diff line --> +        try
Usage pattern --> jo == null￿break;
Diff line --> +        try
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        try
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        {
Usage pattern --> value == null￿return null;
Diff line --> +        {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        {
Usage pattern --> names == null￿return null;
Diff line --> +        {
Usage pattern --> jo == null￿break;
Diff line --> +        {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> value == null￿return null;
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> names == null￿return null;
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> jo == null￿break;
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            for (int i = 0; i < 10; i++)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            {
Usage pattern --> value == null￿return null;
Diff line --> +            {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            {
Usage pattern --> names == null￿return null;
Diff line --> +            {
Usage pattern --> jo == null￿break;
Diff line --> +            {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +               // do something
Usage pattern --> value == null￿return null;
Diff line --> +               // do something
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +               // do something
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +               // do something
Usage pattern --> names == null￿return null;
Diff line --> +               // do something
Usage pattern --> jo == null￿break;
Diff line --> +               // do something
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +               // do something
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            // Create loop;
Usage pattern --> value == null￿return null;
Diff line --> +            // Create loop;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            // Create loop;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            // Create loop;
Usage pattern --> names == null￿return null;
Diff line --> +            // Create loop;
Usage pattern --> jo == null￿break;
Diff line --> +            // Create loop;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            // Create loop;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> value == null￿return null;
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> names == null￿return null;
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> jo == null￿break;
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            // nodes[9].next = nodes[3];
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> value == null￿return null;
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> names == null￿return null;
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> jo == null￿break;
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            //Boolean abc= Check_Circular(nodes[0]);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            //System.out.print(abc);
Usage pattern --> value == null￿return null;
Diff line --> +            //System.out.print(abc);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            //System.out.print(abc);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            //System.out.print(abc);
Usage pattern --> names == null￿return null;
Diff line --> +            //System.out.print(abc);
Usage pattern --> jo == null￿break;
Diff line --> +            //System.out.print(abc);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            //System.out.print(abc);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        catch(NullPointerException e)
Usage pattern --> value == null￿return null;
Diff line --> +        catch(NullPointerException e)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        catch(NullPointerException e)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        catch(NullPointerException e)
Usage pattern --> names == null￿return null;
Diff line --> +        catch(NullPointerException e)
Usage pattern --> jo == null￿break;
Diff line --> +        catch(NullPointerException e)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        catch(NullPointerException e)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        {
Usage pattern --> value == null￿return null;
Diff line --> +        {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        {
Usage pattern --> names == null￿return null;
Diff line --> +        {
Usage pattern --> jo == null￿break;
Diff line --> +        {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> value == null￿return null;
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> names == null￿return null;
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> jo == null￿break;
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            System.out.print("NullPointerException caught");
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 48ac7505f6c0c6a9c33c56514a6dcab2875917fc and 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 48ac7505f6c0c6a9c33c56514a6dcab2875917fc to 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db


****Parsing for addition at revision 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   String string = object.toString();
Usage pattern --> value == null￿return null;
Diff line --> +   String string = object.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   String string = object.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   String string = object.toString();
Usage pattern --> names == null￿return null;
Diff line --> +   String string = object.toString();
Usage pattern --> jo == null￿break;
Diff line --> +   String string = object.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   String string = object.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> value == null￿return null;
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names == null￿return null;
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo == null￿break;
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +    sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +    sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +    sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    int length = string.length();
Usage pattern --> value == null￿return null;
Diff line --> +    int length = string.length();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    int length = string.length();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    int length = string.length();
Usage pattern --> names == null￿return null;
Diff line --> +    int length = string.length();
Usage pattern --> jo == null￿break;
Diff line --> +    int length = string.length();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    int length = string.length();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> value == null￿return null;
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> names == null￿return null;
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> jo == null￿break;
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    for (int j = 0; j < length; j += 1) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     char c = string.charAt(j);
Usage pattern --> value == null￿return null;
Diff line --> +     char c = string.charAt(j);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     char c = string.charAt(j);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     char c = string.charAt(j);
Usage pattern --> names == null￿return null;
Diff line --> +     char c = string.charAt(j);
Usage pattern --> jo == null￿break;
Diff line --> +     char c = string.charAt(j);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     char c = string.charAt(j);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> value == null￿return null;
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> names == null￿return null;
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> jo == null￿break;
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     if (c >= ' ' && c != '"') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +      sb.append(c);
Usage pattern --> value == null￿return null;
Diff line --> +      sb.append(c);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +      sb.append(c);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +      sb.append(c);
Usage pattern --> names == null￿return null;
Diff line --> +      sb.append(c);
Usage pattern --> jo == null￿break;
Diff line --> +      sb.append(c);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +      sb.append(c);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     }
Usage pattern --> value == null￿return null;
Diff line --> +     }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     }
Usage pattern --> names == null￿return null;
Diff line --> +     }
Usage pattern --> jo == null￿break;
Diff line --> +     }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +    sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +    sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +    sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   } else {
Usage pattern --> value == null￿return null;
Diff line --> +   } else {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   } else {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   } else {
Usage pattern --> names == null￿return null;
Diff line --> +   } else {
Usage pattern --> jo == null￿break;
Diff line --> +   } else {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   } else {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    sb.append(string);
Usage pattern --> value == null￿return null;
Diff line --> +    sb.append(string);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    sb.append(string);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    sb.append(string);
Usage pattern --> names == null￿return null;
Diff line --> +    sb.append(string);
Usage pattern --> jo == null￿break;
Diff line --> +    sb.append(string);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    sb.append(string);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   }
Usage pattern --> value == null￿return null;
Diff line --> +   }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   }
Usage pattern --> names == null￿return null;
Diff line --> +   }
Usage pattern --> jo == null￿break;
Diff line --> +   }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db and f29e26e40d3a244499ae41fb825264ffa230815b:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision 2285a05c8a6abe5489c6c9cc9ddf0c3caed7f0db to f29e26e40d3a244499ae41fb825264ffa230815b


****Parsing for addition at revision f29e26e40d3a244499ae41fb825264ffa230815b****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  if (jo != null){
Usage pattern --> value == null￿return null;
Diff line --> +  if (jo != null){
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  if (jo != null){
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  if (jo != null){
Usage pattern --> names == null￿return null;
Diff line --> +  if (jo != null){
Usage pattern --> jo == null￿break;
Diff line --> +  if (jo != null){
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  if (jo != null){
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Null check pattern was added at revision f29e26e40d3a244499ae41fb825264ffa230815b
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> value == null￿return null;
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> names == null￿return null;
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> jo == null￿break;
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   JSONArray names = jo.names();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   if (names != null) {
Usage pattern --> value == null￿return null;
Diff line --> +   if (names != null) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   if (names != null) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   if (names != null) {
Usage pattern --> names == null￿return null;
Diff line --> +   if (names != null) {
Usage pattern --> jo == null￿break;
Diff line --> +   if (names != null) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   if (names != null) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> value == null￿return null;
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> names == null￿return null;
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> jo == null￿break;
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    return rowToString(names) + toString(names, ja);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   }
Usage pattern --> value == null￿return null;
Diff line --> +   }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   }
Usage pattern --> names == null￿return null;
Diff line --> +   }
Usage pattern --> jo == null￿break;
Diff line --> +   }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of f29e26e40d3a244499ae41fb825264ffa230815b and da6b1b03cc7d21c11e543c8549fcfda5b7511583:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision f29e26e40d3a244499ae41fb825264ffa230815b to da6b1b03cc7d21c11e543c8549fcfda5b7511583


****Parsing for addition at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583****

Added testClass.java to .\dummy-repo3\ repository source files.

 File for diff --> testClass.java

********Null checks found in testClass.java********
rowToJSONArray￿value == null
rowToJSONObject￿ja != null
rowToString￿object != null
toJSONArray￿names == null
toJSONArray￿jo == null
toString￿names != null
toString￿names == null
toString￿jo != null
Diff line --> +++ b/testClass.java
Usage pattern --> value == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +++ b/testClass.java
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +++ b/testClass.java
Usage pattern --> names == null￿return null;
Diff line --> +++ b/testClass.java
Usage pattern --> jo == null￿break;
Diff line --> +++ b/testClass.java
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +++ b/testClass.java
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +package org.json;
Usage pattern --> value == null￿return null;
Diff line --> +package org.json;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +package org.json;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +package org.json;
Usage pattern --> names == null￿return null;
Diff line --> +package org.json;
Usage pattern --> jo == null￿break;
Diff line --> +package org.json;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +package org.json;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +/*
Usage pattern --> value == null￿return null;
Diff line --> +/*
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +/*
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +/*
Usage pattern --> names == null￿return null;
Diff line --> +/*
Usage pattern --> jo == null￿break;
Diff line --> +/*
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +/*
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> value == null￿return null;
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> names == null￿return null;
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> jo == null￿break;
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +Copyright (c) 2002 JSON.org
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> value == null￿return null;
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> names == null￿return null;
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> jo == null￿break;
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +Permission is hereby granted, free of charge, to any person obtaining a copy
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> value == null￿return null;
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> names == null￿return null;
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> jo == null￿break;
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +of this software and associated documentation files (the "Software"), to deal
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> value == null￿return null;
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> names == null￿return null;
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> jo == null￿break;
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +in the Software without restriction, including without limitation the rights
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> value == null￿return null;
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> names == null￿return null;
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> jo == null￿break;
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> value == null￿return null;
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> names == null￿return null;
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> jo == null￿break;
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +copies of the Software, and to permit persons to whom the Software is
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> value == null￿return null;
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> names == null￿return null;
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> jo == null￿break;
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +furnished to do so, subject to the following conditions:
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> value == null￿return null;
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> names == null￿return null;
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> jo == null￿break;
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +The above copyright notice and this permission notice shall be included in all
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> value == null￿return null;
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> names == null￿return null;
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> jo == null￿break;
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +copies or substantial portions of the Software.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> value == null￿return null;
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> names == null￿return null;
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> jo == null￿break;
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +The Software shall be used for Good, not Evil.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> value == null￿return null;
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> names == null￿return null;
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> jo == null￿break;
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> value == null￿return null;
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> names == null￿return null;
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> jo == null￿break;
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> value == null￿return null;
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> names == null￿return null;
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> jo == null￿break;
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> value == null￿return null;
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> names == null￿return null;
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> jo == null￿break;
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> value == null￿return null;
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> names == null￿return null;
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> jo == null￿break;
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> value == null￿return null;
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> names == null￿return null;
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> jo == null￿break;
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +SOFTWARE.
Usage pattern --> value == null￿return null;
Diff line --> +SOFTWARE.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +SOFTWARE.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +SOFTWARE.
Usage pattern --> names == null￿return null;
Diff line --> +SOFTWARE.
Usage pattern --> jo == null￿break;
Diff line --> +SOFTWARE.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +SOFTWARE.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +*/
Usage pattern --> value == null￿return null;
Diff line --> +*/
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +*/
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +*/
Usage pattern --> names == null￿return null;
Diff line --> +*/
Usage pattern --> jo == null￿break;
Diff line --> +*/
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +*/
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +/**
Usage pattern --> value == null￿return null;
Diff line --> +/**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +/**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +/**
Usage pattern --> names == null￿return null;
Diff line --> +/**
Usage pattern --> jo == null￿break;
Diff line --> +/**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +/**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> value == null￿return null;
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> names == null￿return null;
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> jo == null￿break;
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * This provides static methods to convert comma delimited text into a
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> value == null￿return null;
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> names == null￿return null;
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> jo == null￿break;
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * JSONArray, and to covert a JSONArray into comma delimited text. Comma
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> value == null￿return null;
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> names == null￿return null;
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> jo == null￿break;
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * delimited text is a very popular format for data interchange. It is
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> value == null￿return null;
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> names == null￿return null;
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> jo == null￿break;
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * understood by most database, spreadsheet, and organizer programs.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * <p>
Usage pattern --> value == null￿return null;
Diff line --> + * <p>
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * <p>
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * <p>
Usage pattern --> names == null￿return null;
Diff line --> + * <p>
Usage pattern --> jo == null￿break;
Diff line --> + * <p>
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * <p>
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> value == null￿return null;
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> names == null￿return null;
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> jo == null￿break;
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * Each row of text represents a row in a table or a data record. Each row
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> value == null￿return null;
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> names == null￿return null;
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> jo == null￿break;
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * ends with a NEWLINE character. Each row contains one or more values.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> value == null￿return null;
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> names == null￿return null;
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> jo == null￿break;
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * Values are separated by commas. A value can contain any character except
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> value == null￿return null;
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> names == null￿return null;
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> jo == null￿break;
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * for comma, unless is is wrapped in single quotes or double quotes.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * <p>
Usage pattern --> value == null￿return null;
Diff line --> + * <p>
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * <p>
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * <p>
Usage pattern --> names == null￿return null;
Diff line --> + * <p>
Usage pattern --> jo == null￿break;
Diff line --> + * <p>
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * <p>
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> value == null￿return null;
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> names == null￿return null;
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> jo == null￿break;
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * The first row usually contains the names of the columns.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * <p>
Usage pattern --> value == null￿return null;
Diff line --> + * <p>
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * <p>
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * <p>
Usage pattern --> names == null￿return null;
Diff line --> + * <p>
Usage pattern --> jo == null￿break;
Diff line --> + * <p>
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * <p>
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * A comma delimited list can be converted into a JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> value == null￿return null;
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> names == null￿return null;
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> jo == null￿break;
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * The names for the elements in the JSONObjects can be taken from the names
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * in the first row.
Usage pattern --> value == null￿return null;
Diff line --> + * in the first row.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * in the first row.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * in the first row.
Usage pattern --> names == null￿return null;
Diff line --> + * in the first row.
Usage pattern --> jo == null￿break;
Diff line --> + * in the first row.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * in the first row.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * @author JSON.org
Usage pattern --> value == null￿return null;
Diff line --> + * @author JSON.org
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * @author JSON.org
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * @author JSON.org
Usage pattern --> names == null￿return null;
Diff line --> + * @author JSON.org
Usage pattern --> jo == null￿break;
Diff line --> + * @author JSON.org
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * @author JSON.org
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + * @version 2014-05-03
Usage pattern --> value == null￿return null;
Diff line --> + * @version 2014-05-03
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + * @version 2014-05-03
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + * @version 2014-05-03
Usage pattern --> names == null￿return null;
Diff line --> + * @version 2014-05-03
Usage pattern --> jo == null￿break;
Diff line --> + * @version 2014-05-03
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + * @version 2014-05-03
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> + */
Usage pattern --> value == null￿return null;
Diff line --> + */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> + */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> + */
Usage pattern --> names == null￿return null;
Diff line --> + */
Usage pattern --> jo == null￿break;
Diff line --> + */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> + */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +public class CDL {
Usage pattern --> value == null￿return null;
Diff line --> +public class CDL {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +public class CDL {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +public class CDL {
Usage pattern --> names == null￿return null;
Diff line --> +public class CDL {
Usage pattern --> jo == null￿break;
Diff line --> +public class CDL {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +public class CDL {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> value == null￿return null;
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> names == null￿return null;
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> jo == null￿break;
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Get the next value. The value can be wrapped in quotes. The value can
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * be empty.
Usage pattern --> value == null￿return null;
Diff line --> +     * be empty.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * be empty.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * be empty.
Usage pattern --> names == null￿return null;
Diff line --> +     * be empty.
Usage pattern --> jo == null￿break;
Diff line --> +     * be empty.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * be empty.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return The value string, or null if empty.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException if the quoted string is badly formed.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    private static String getValue(JSONTokener x) throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        char c;
Usage pattern --> value == null￿return null;
Diff line --> +        char c;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        char c;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        char c;
Usage pattern --> names == null￿return null;
Diff line --> +        char c;
Usage pattern --> jo == null￿break;
Diff line --> +        char c;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        char c;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        char q;
Usage pattern --> value == null￿return null;
Diff line --> +        char q;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        char q;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        char q;
Usage pattern --> names == null￿return null;
Diff line --> +        char q;
Usage pattern --> jo == null￿break;
Diff line --> +        char q;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        char q;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        StringBuffer sb;
Usage pattern --> value == null￿return null;
Diff line --> +        StringBuffer sb;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        StringBuffer sb;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        StringBuffer sb;
Usage pattern --> names == null￿return null;
Diff line --> +        StringBuffer sb;
Usage pattern --> jo == null￿break;
Diff line --> +        StringBuffer sb;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        StringBuffer sb;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        do {
Usage pattern --> value == null￿return null;
Diff line --> +        do {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        do {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        do {
Usage pattern --> names == null￿return null;
Diff line --> +        do {
Usage pattern --> jo == null￿break;
Diff line --> +        do {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        do {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            c = x.next();
Usage pattern --> value == null￿return null;
Diff line --> +            c = x.next();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            c = x.next();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            c = x.next();
Usage pattern --> names == null￿return null;
Diff line --> +            c = x.next();
Usage pattern --> jo == null￿break;
Diff line --> +            c = x.next();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            c = x.next();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> value == null￿return null;
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> names == null￿return null;
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> jo == null￿break;
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        } while (c == ' ' || c == '\t');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        switch (c) {
Usage pattern --> value == null￿return null;
Diff line --> +        switch (c) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        switch (c) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        switch (c) {
Usage pattern --> names == null￿return null;
Diff line --> +        switch (c) {
Usage pattern --> jo == null￿break;
Diff line --> +        switch (c) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        switch (c) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        case 0:
Usage pattern --> value == null￿return null;
Diff line --> +        case 0:
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        case 0:
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        case 0:
Usage pattern --> names == null￿return null;
Diff line --> +        case 0:
Usage pattern --> jo == null￿break;
Diff line --> +        case 0:
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        case 0:
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return null;
Usage pattern --> value == null￿return null;
Diff line --> +            return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return null;
Usage pattern --> names == null￿return null;
Diff line --> +            return null;
Usage pattern --> jo == null￿break;
Diff line --> +            return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        case '"':
Usage pattern --> value == null￿return null;
Diff line --> +        case '"':
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        case '"':
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        case '"':
Usage pattern --> names == null￿return null;
Diff line --> +        case '"':
Usage pattern --> jo == null￿break;
Diff line --> +        case '"':
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        case '"':
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        case '\'':
Usage pattern --> value == null￿return null;
Diff line --> +        case '\'':
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        case '\'':
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        case '\'':
Usage pattern --> names == null￿return null;
Diff line --> +        case '\'':
Usage pattern --> jo == null￿break;
Diff line --> +        case '\'':
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        case '\'':
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            q = c;
Usage pattern --> value == null￿return null;
Diff line --> +            q = c;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            q = c;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            q = c;
Usage pattern --> names == null￿return null;
Diff line --> +            q = c;
Usage pattern --> jo == null￿break;
Diff line --> +            q = c;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            q = c;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            sb = new StringBuffer();
Usage pattern --> value == null￿return null;
Diff line --> +            sb = new StringBuffer();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            sb = new StringBuffer();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            sb = new StringBuffer();
Usage pattern --> names == null￿return null;
Diff line --> +            sb = new StringBuffer();
Usage pattern --> jo == null￿break;
Diff line --> +            sb = new StringBuffer();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            sb = new StringBuffer();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            for (;;) {
Usage pattern --> value == null￿return null;
Diff line --> +            for (;;) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            for (;;) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            for (;;) {
Usage pattern --> names == null￿return null;
Diff line --> +            for (;;) {
Usage pattern --> jo == null￿break;
Diff line --> +            for (;;) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            for (;;) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                c = x.next();
Usage pattern --> value == null￿return null;
Diff line --> +                c = x.next();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                c = x.next();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                c = x.next();
Usage pattern --> names == null￿return null;
Diff line --> +                c = x.next();
Usage pattern --> jo == null￿break;
Diff line --> +                c = x.next();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                c = x.next();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                if (c == q) {
Usage pattern --> value == null￿return null;
Diff line --> +                if (c == q) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                if (c == q) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                if (c == q) {
Usage pattern --> names == null￿return null;
Diff line --> +                if (c == q) {
Usage pattern --> jo == null￿break;
Diff line --> +                if (c == q) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                if (c == q) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    break;
Usage pattern --> value == null￿return null;
Diff line --> +                    break;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    break;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    break;
Usage pattern --> names == null￿return null;
Diff line --> +                    break;
Usage pattern --> jo == null￿break;
Diff line --> +                    break;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    break;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                }
Usage pattern --> value == null￿return null;
Diff line --> +                }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                }
Usage pattern --> names == null￿return null;
Diff line --> +                }
Usage pattern --> jo == null￿break;
Diff line --> +                }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> value == null￿return null;
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> names == null￿return null;
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> jo == null￿break;
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                if (c == 0 || c == '\n' || c == '\r') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> value == null￿return null;
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> names == null￿return null;
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> jo == null￿break;
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    throw x.syntaxError("Missing close quote '" + q + "'.");
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                }
Usage pattern --> value == null￿return null;
Diff line --> +                }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                }
Usage pattern --> names == null￿return null;
Diff line --> +                }
Usage pattern --> jo == null￿break;
Diff line --> +                }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                sb.append(c);
Usage pattern --> value == null￿return null;
Diff line --> +                sb.append(c);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                sb.append(c);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                sb.append(c);
Usage pattern --> names == null￿return null;
Diff line --> +                sb.append(c);
Usage pattern --> jo == null￿break;
Diff line --> +                sb.append(c);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                sb.append(c);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return sb.toString();
Usage pattern --> value == null￿return null;
Diff line --> +            return sb.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return sb.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return sb.toString();
Usage pattern --> names == null￿return null;
Diff line --> +            return sb.toString();
Usage pattern --> jo == null￿break;
Diff line --> +            return sb.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return sb.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        case ',':
Usage pattern --> value == null￿return null;
Diff line --> +        case ',':
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        case ',':
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        case ',':
Usage pattern --> names == null￿return null;
Diff line --> +        case ',':
Usage pattern --> jo == null￿break;
Diff line --> +        case ',':
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        case ',':
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            x.back();
Usage pattern --> value == null￿return null;
Diff line --> +            x.back();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            x.back();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            x.back();
Usage pattern --> names == null￿return null;
Diff line --> +            x.back();
Usage pattern --> jo == null￿break;
Diff line --> +            x.back();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            x.back();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return "";
Usage pattern --> value == null￿return null;
Diff line --> +            return "";
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return "";
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return "";
Usage pattern --> names == null￿return null;
Diff line --> +            return "";
Usage pattern --> jo == null￿break;
Diff line --> +            return "";
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return "";
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        default:
Usage pattern --> value == null￿return null;
Diff line --> +        default:
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        default:
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        default:
Usage pattern --> names == null￿return null;
Diff line --> +        default:
Usage pattern --> jo == null￿break;
Diff line --> +        default:
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        default:
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            x.back();
Usage pattern --> value == null￿return null;
Diff line --> +            x.back();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            x.back();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            x.back();
Usage pattern --> names == null￿return null;
Diff line --> +            x.back();
Usage pattern --> jo == null￿break;
Diff line --> +            x.back();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            x.back();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return x.nextTo(',');
Usage pattern --> value == null￿return null;
Diff line --> +            return x.nextTo(',');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return x.nextTo(',');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return x.nextTo(',');
Usage pattern --> names == null￿return null;
Diff line --> +            return x.nextTo(',');
Usage pattern --> jo == null￿break;
Diff line --> +            return x.nextTo(',');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return x.nextTo(',');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONArray of strings from a row of comma delimited values.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONArray of strings.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> value == null￿return null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> names == null￿return null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> jo == null￿break;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        for (;;) {
Usage pattern --> value == null￿return null;
Diff line --> +        for (;;) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        for (;;) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        for (;;) {
Usage pattern --> names == null￿return null;
Diff line --> +        for (;;) {
Usage pattern --> jo == null￿break;
Diff line --> +        for (;;) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        for (;;) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            String value = getValue(x);
Usage pattern --> value == null￿return null;
Diff line --> +            String value = getValue(x);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            String value = getValue(x);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            String value = getValue(x);
Usage pattern --> names == null￿return null;
Diff line --> +            String value = getValue(x);
Usage pattern --> jo == null￿break;
Diff line --> +            String value = getValue(x);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            String value = getValue(x);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            char c = x.next();
Usage pattern --> value == null￿return null;
Diff line --> +            char c = x.next();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            char c = x.next();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            char c = x.next();
Usage pattern --> names == null￿return null;
Diff line --> +            char c = x.next();
Usage pattern --> jo == null￿break;
Diff line --> +            char c = x.next();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            char c = x.next();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (value == null ||
Usage pattern --> value == null￿return null;
Null check pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +            if (value == null ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (value == null ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            if (value == null ||
Usage pattern --> names == null￿return null;
Diff line --> +            if (value == null ||
Usage pattern --> jo == null￿break;
Diff line --> +            if (value == null ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (value == null ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> value == null￿return null;
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> names == null￿return null;
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> jo == null￿break;
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    (ja.length() == 0 && value.length() == 0 && c != ',')) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                return null;
Usage pattern --> value == null￿return null;
Diff line --> +                return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                return null;
Usage pattern --> names == null￿return null;
Diff line --> +                return null;
Usage pattern --> jo == null￿break;
Diff line --> +                return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            ja.put(value);
Usage pattern --> value == null￿return null;
Diff line --> +            ja.put(value);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            ja.put(value);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            ja.put(value);
Usage pattern --> names == null￿return null;
Diff line --> +            ja.put(value);
Usage pattern --> jo == null￿break;
Diff line --> +            ja.put(value);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            ja.put(value);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            for (;;) {
Usage pattern --> value == null￿return null;
Diff line --> +            for (;;) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            for (;;) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            for (;;) {
Usage pattern --> names == null￿return null;
Diff line --> +            for (;;) {
Usage pattern --> jo == null￿break;
Diff line --> +            for (;;) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            for (;;) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                if (c == ',') {
Usage pattern --> value == null￿return null;
Diff line --> +                if (c == ',') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                if (c == ',') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                if (c == ',') {
Usage pattern --> names == null￿return null;
Diff line --> +                if (c == ',') {
Usage pattern --> jo == null￿break;
Diff line --> +                if (c == ',') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                if (c == ',') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    break;
Usage pattern --> value == null￿return null;
Diff line --> +                    break;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    break;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    break;
Usage pattern --> names == null￿return null;
Diff line --> +                    break;
Usage pattern --> jo == null￿break;
Diff line --> +                    break;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    break;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                }
Usage pattern --> value == null￿return null;
Diff line --> +                }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                }
Usage pattern --> names == null￿return null;
Diff line --> +                }
Usage pattern --> jo == null￿break;
Diff line --> +                }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                if (c != ' ') {
Usage pattern --> value == null￿return null;
Diff line --> +                if (c != ' ') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                if (c != ' ') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                if (c != ' ') {
Usage pattern --> names == null￿return null;
Diff line --> +                if (c != ' ') {
Usage pattern --> jo == null￿break;
Diff line --> +                if (c != ' ') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                if (c != ' ') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> value == null￿return null;
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> names == null￿return null;
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> jo == null￿break;
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    if (c == '\n' || c == '\r' || c == 0) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        return ja;
Usage pattern --> value == null￿return null;
Diff line --> +                        return ja;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        return ja;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        return ja;
Usage pattern --> names == null￿return null;
Diff line --> +                        return ja;
Usage pattern --> jo == null￿break;
Diff line --> +                        return ja;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        return ja;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    }
Usage pattern --> value == null￿return null;
Diff line --> +                    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    }
Usage pattern --> names == null￿return null;
Diff line --> +                    }
Usage pattern --> jo == null￿break;
Diff line --> +                    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> value == null￿return null;
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> names == null￿return null;
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> jo == null￿break;
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    throw x.syntaxError("Bad character '" + c + "' (" +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                            (int)c + ").");
Usage pattern --> value == null￿return null;
Diff line --> +                            (int)c + ").");
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                            (int)c + ").");
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                            (int)c + ").");
Usage pattern --> names == null￿return null;
Diff line --> +                            (int)c + ").");
Usage pattern --> jo == null￿break;
Diff line --> +                            (int)c + ").");
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                            (int)c + ").");
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                }
Usage pattern --> value == null￿return null;
Diff line --> +                }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                }
Usage pattern --> names == null￿return null;
Diff line --> +                }
Usage pattern --> jo == null￿break;
Diff line --> +                }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                c = x.next();
Usage pattern --> value == null￿return null;
Diff line --> +                c = x.next();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                c = x.next();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                c = x.next();
Usage pattern --> names == null￿return null;
Diff line --> +                c = x.next();
Usage pattern --> jo == null￿break;
Diff line --> +                c = x.next();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                c = x.next();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONObject from a row of comma delimited text, using a
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> value == null￿return null;
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> names == null￿return null;
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> jo == null￿break;
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * parallel JSONArray of strings to provides the names of the elements.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> value == null￿return null;
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> names == null￿return null;
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> jo == null￿break;
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param names A JSONArray of names. This is commonly obtained from the
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> value == null￿return null;
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> names == null￿return null;
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> jo == null￿break;
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     *  first row of a comma delimited text file using the rowToJSONArray
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     *  method.
Usage pattern --> value == null￿return null;
Diff line --> +     *  method.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     *  method.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     *  method.
Usage pattern --> names == null￿return null;
Diff line --> +     *  method.
Usage pattern --> jo == null￿break;
Diff line --> +     *  method.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     *  method.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONObject combining the names and values.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONObject rowToJSONObject(JSONArray names, JSONTokener x)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +            throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> value == null￿return null;
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> names == null￿return null;
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> jo == null￿break;
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        JSONArray ja = rowToJSONArray(x);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> value == null￿return null;
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Null usage pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> names == null￿return null;
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> jo == null￿break;
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return ja != null ? ja.toJSONObject(names) :  null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a comma delimited text row from a JSONArray. Values containing
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> value == null￿return null;
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> names == null￿return null;
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> jo == null￿break;
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * the comma character will be quoted. Troublesome characters may be
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * removed.
Usage pattern --> value == null￿return null;
Diff line --> +     * removed.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * removed.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * removed.
Usage pattern --> names == null￿return null;
Diff line --> +     * removed.
Usage pattern --> jo == null￿break;
Diff line --> +     * removed.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * removed.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param ja A JSONArray of strings.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A string ending in NEWLINE.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> value == null￿return null;
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> names == null￿return null;
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> jo == null￿break;
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static String rowToString(JSONArray ja) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> value == null￿return null;
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> names == null￿return null;
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> jo == null￿break;
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        StringBuilder sb = new StringBuilder();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> value == null￿return null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> names == null￿return null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> jo == null￿break;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (i > 0) {
Usage pattern --> value == null￿return null;
Diff line --> +            if (i > 0) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (i > 0) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            if (i > 0) {
Usage pattern --> names == null￿return null;
Diff line --> +            if (i > 0) {
Usage pattern --> jo == null￿break;
Diff line --> +            if (i > 0) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (i > 0) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                sb.append(',');
Usage pattern --> value == null￿return null;
Diff line --> +                sb.append(',');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                sb.append(',');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                sb.append(',');
Usage pattern --> names == null￿return null;
Diff line --> +                sb.append(',');
Usage pattern --> jo == null￿break;
Diff line --> +                sb.append(',');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                sb.append(',');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> value == null￿return null;
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> names == null￿return null;
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> jo == null￿break;
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            Object object = ja.opt(i);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (object != null) {
Usage pattern --> value == null￿return null;
Diff line --> +            if (object != null) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (object != null) {
Usage pattern --> object != null￿String string = object.toString();
Null usage pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +            if (object != null) {
Usage pattern --> names == null￿return null;
Diff line --> +            if (object != null) {
Usage pattern --> jo == null￿break;
Diff line --> +            if (object != null) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (object != null) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                String string = object.toString();
Usage pattern --> value == null￿return null;
Diff line --> +                String string = object.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                String string = object.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                String string = object.toString();
Usage pattern --> names == null￿return null;
Diff line --> +                String string = object.toString();
Usage pattern --> jo == null￿break;
Diff line --> +                String string = object.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                String string = object.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                if (string.length() > 0 && (string.indexOf(',') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> value == null￿return null;
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names == null￿return null;
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo == null￿break;
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 ||
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> value == null￿return null;
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names == null￿return null;
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo == null￿break;
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +                    sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +                    sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +                    sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    int length = string.length();
Usage pattern --> value == null￿return null;
Diff line --> +                    int length = string.length();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    int length = string.length();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    int length = string.length();
Usage pattern --> names == null￿return null;
Diff line --> +                    int length = string.length();
Usage pattern --> jo == null￿break;
Diff line --> +                    int length = string.length();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    int length = string.length();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> value == null￿return null;
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> names == null￿return null;
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> jo == null￿break;
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    for (int j = 0; j < length; j += 1) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> value == null￿return null;
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> names == null￿return null;
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> jo == null￿break;
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        char c = string.charAt(j);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> value == null￿return null;
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> names == null￿return null;
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> jo == null￿break;
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        if (c >= ' ' && c != '"') {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                            sb.append(c);
Usage pattern --> value == null￿return null;
Diff line --> +                            sb.append(c);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                            sb.append(c);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                            sb.append(c);
Usage pattern --> names == null￿return null;
Diff line --> +                            sb.append(c);
Usage pattern --> jo == null￿break;
Diff line --> +                            sb.append(c);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                            sb.append(c);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                        }
Usage pattern --> value == null￿return null;
Diff line --> +                        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                        }
Usage pattern --> names == null￿return null;
Diff line --> +                        }
Usage pattern --> jo == null￿break;
Diff line --> +                        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    }
Usage pattern --> value == null￿return null;
Diff line --> +                    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    }
Usage pattern --> names == null￿return null;
Diff line --> +                    }
Usage pattern --> jo == null￿break;
Diff line --> +                    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    sb.append('"');
Usage pattern --> value == null￿return null;
Diff line --> +                    sb.append('"');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    sb.append('"');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    sb.append('"');
Usage pattern --> names == null￿return null;
Diff line --> +                    sb.append('"');
Usage pattern --> jo == null￿break;
Diff line --> +                    sb.append('"');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    sb.append('"');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                } else {
Usage pattern --> value == null￿return null;
Diff line --> +                } else {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                } else {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                } else {
Usage pattern --> names == null￿return null;
Diff line --> +                } else {
Usage pattern --> jo == null￿break;
Diff line --> +                } else {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                } else {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                    sb.append(string);
Usage pattern --> value == null￿return null;
Diff line --> +                    sb.append(string);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                    sb.append(string);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                    sb.append(string);
Usage pattern --> names == null￿return null;
Diff line --> +                    sb.append(string);
Usage pattern --> jo == null￿break;
Diff line --> +                    sb.append(string);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                    sb.append(string);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                }
Usage pattern --> value == null￿return null;
Diff line --> +                }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                }
Usage pattern --> names == null￿return null;
Diff line --> +                }
Usage pattern --> jo == null￿break;
Diff line --> +                }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        sb.append('\n');
Usage pattern --> value == null￿return null;
Diff line --> +        sb.append('\n');
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        sb.append('\n');
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        sb.append('\n');
Usage pattern --> names == null￿return null;
Diff line --> +        sb.append('\n');
Usage pattern --> jo == null￿break;
Diff line --> +        sb.append('\n');
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        sb.append('\n');
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return sb.toString();
Usage pattern --> value == null￿return null;
Diff line --> +        return sb.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return sb.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return sb.toString();
Usage pattern --> names == null￿return null;
Diff line --> +        return sb.toString();
Usage pattern --> jo == null￿break;
Diff line --> +        return sb.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return sb.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * using the first row as a source of names.
Usage pattern --> value == null￿return null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * using the first row as a source of names.
Usage pattern --> names == null￿return null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> jo == null￿break;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * using the first row as a source of names.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONArray toJSONArray(String string) throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> value == null￿return null;
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> names == null￿return null;
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> jo == null￿break;
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return toJSONArray(new JSONTokener(string));
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string,
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * using the first row as a source of names.
Usage pattern --> value == null￿return null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * using the first row as a source of names.
Usage pattern --> names == null￿return null;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> jo == null￿break;
Diff line --> +     * using the first row as a source of names.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * using the first row as a source of names.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param x The JSONTokener containing the comma delimited text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONArray toJSONArray(JSONTokener x) throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> value == null￿return null;
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> names == null￿return null;
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> jo == null￿break;
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return toJSONArray(rowToJSONArray(x), x);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> value == null￿return null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> names == null￿return null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> jo == null￿break;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param string The comma delimited text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, String string)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +            throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> value == null￿return null;
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> names == null￿return null;
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> jo == null￿break;
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return toJSONArray(names, new JSONTokener(string));
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a JSONArray of JSONObjects from a comma delimited text string
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> value == null￿return null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> names == null￿return null;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> jo == null￿break;
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * using a supplied JSONArray as the source of element names.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param x A JSONTokener of the source text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> value == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> names == null￿return null;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> jo == null￿break;
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static JSONArray toJSONArray(JSONArray names, JSONTokener x)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +            throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> value == null￿return null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> names == null￿return null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> jo == null￿break;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return null;
Usage pattern --> value == null￿return null;
Diff line --> +            return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return null;
Usage pattern --> names == null￿return null;
Diff line --> +            return null;
Usage pattern --> jo == null￿break;
Diff line --> +            return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> value == null￿return null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> names == null￿return null;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> jo == null￿break;
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        JSONArray ja = new JSONArray();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        for (;;) {
Usage pattern --> value == null￿return null;
Diff line --> +        for (;;) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        for (;;) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        for (;;) {
Usage pattern --> names == null￿return null;
Diff line --> +        for (;;) {
Usage pattern --> jo == null￿break;
Diff line --> +        for (;;) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        for (;;) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> value == null￿return null;
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> names == null￿return null;
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> jo == null￿break;
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            JSONObject jo = rowToJSONObject(names, x);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (jo == null) {
Usage pattern --> value == null￿return null;
Diff line --> +            if (jo == null) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (jo == null) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            if (jo == null) {
Usage pattern --> names == null￿return null;
Diff line --> +            if (jo == null) {
Usage pattern --> jo == null￿break;
Null check pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +            if (jo == null) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (jo == null) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +                break;
Usage pattern --> value == null￿return null;
Diff line --> +                break;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                break;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                break;
Usage pattern --> names == null￿return null;
Diff line --> +                break;
Usage pattern --> jo == null￿break;
Diff line --> +                break;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                break;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            ja.put(jo);
Usage pattern --> value == null￿return null;
Diff line --> +            ja.put(jo);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            ja.put(jo);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            ja.put(jo);
Usage pattern --> names == null￿return null;
Diff line --> +            ja.put(jo);
Usage pattern --> jo == null￿break;
Diff line --> +            ja.put(jo);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            ja.put(jo);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> value == null￿return null;
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> names == null￿return null;
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> jo == null￿break;
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        if (ja.length() == 0) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return null;
Usage pattern --> value == null￿return null;
Diff line --> +            return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return null;
Usage pattern --> names == null￿return null;
Diff line --> +            return null;
Usage pattern --> jo == null￿break;
Diff line --> +            return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return ja;
Usage pattern --> value == null￿return null;
Diff line --> +        return ja;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return ja;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return ja;
Usage pattern --> names == null￿return null;
Diff line --> +        return ja;
Usage pattern --> jo == null￿break;
Diff line --> +        return ja;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return ja;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects. The
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> value == null￿return null;
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> names == null￿return null;
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> jo == null￿break;
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * first row will be a list of names obtained by inspecting the first
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * JSONObject.
Usage pattern --> value == null￿return null;
Diff line --> +     * JSONObject.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * JSONObject.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * JSONObject.
Usage pattern --> names == null￿return null;
Diff line --> +     * JSONObject.
Usage pattern --> jo == null￿break;
Diff line --> +     * JSONObject.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * JSONObject.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A comma delimited text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A comma delimited text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A comma delimited text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static String toString(JSONArray ja) throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> value == null￿return null;
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> names == null￿return null;
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> jo == null￿break;
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        JSONObject jo = ja.optJSONObject(0);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> value == null￿return null;
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> names == null￿return null;
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> jo == null￿break;
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  JSONArray names = jo.names();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  if (names != null) {
Usage pattern --> value == null￿return null;
Diff line --> +  if (names != null) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  if (names != null) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  if (names != null) {
Usage pattern --> names == null￿return null;
Diff line --> +  if (names != null) {
Usage pattern --> jo == null￿break;
Diff line --> +  if (names != null) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Null usage pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +  if (names != null) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> value == null￿return null;
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> names == null￿return null;
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> jo == null￿break;
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +   return rowToString(names) + toString(names, ja);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +  }
Usage pattern --> value == null￿return null;
Diff line --> +  }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +  }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +  }
Usage pattern --> names == null￿return null;
Diff line --> +  }
Usage pattern --> jo == null￿break;
Diff line --> +  }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +  }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return null;
Usage pattern --> value == null￿return null;
Diff line --> +        return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return null;
Usage pattern --> names == null￿return null;
Diff line --> +        return null;
Usage pattern --> jo == null￿break;
Diff line --> +        return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +
Usage pattern --> value == null￿return null;
Diff line --> +
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +
Usage pattern --> names == null￿return null;
Diff line --> +
Usage pattern --> jo == null￿break;
Diff line --> +
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    /**
Usage pattern --> value == null￿return null;
Diff line --> +    /**
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    /**
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    /**
Usage pattern --> names == null￿return null;
Diff line --> +    /**
Usage pattern --> jo == null￿break;
Diff line --> +    /**
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    /**
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> value == null￿return null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> names == null￿return null;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> jo == null￿break;
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * Produce a comma delimited text from a JSONArray of JSONObjects using
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> value == null￿return null;
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> names == null￿return null;
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> jo == null￿break;
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * a provided list of names. The list of names is not included in the
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * output.
Usage pattern --> value == null￿return null;
Diff line --> +     * output.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * output.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * output.
Usage pattern --> names == null￿return null;
Diff line --> +     * output.
Usage pattern --> jo == null￿break;
Diff line --> +     * output.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * output.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param names A JSONArray of strings.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> value == null￿return null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> names == null￿return null;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> jo == null￿break;
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @param ja A JSONArray of JSONObjects.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @return A comma delimited text.
Usage pattern --> value == null￿return null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @return A comma delimited text.
Usage pattern --> names == null￿return null;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> jo == null￿break;
Diff line --> +     * @return A comma delimited text.
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @return A comma delimited text.
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     * @throws JSONException
Usage pattern --> value == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     * @throws JSONException
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     * @throws JSONException
Usage pattern --> names == null￿return null;
Diff line --> +     * @throws JSONException
Usage pattern --> jo == null￿break;
Diff line --> +     * @throws JSONException
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     * @throws JSONException
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +     */
Usage pattern --> value == null￿return null;
Diff line --> +     */
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +     */
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +     */
Usage pattern --> names == null￿return null;
Diff line --> +     */
Usage pattern --> jo == null￿break;
Diff line --> +     */
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +     */
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> value == null￿return null;
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> names == null￿return null;
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> jo == null￿break;
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    public static String toString(JSONArray names, JSONArray ja)
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            throws JSONException {
Usage pattern --> value == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            throws JSONException {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            throws JSONException {
Usage pattern --> names == null￿return null;
Diff line --> +            throws JSONException {
Usage pattern --> jo == null￿break;
Diff line --> +            throws JSONException {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            throws JSONException {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> value == null￿return null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> names == null￿return null;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> jo == null￿break;
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        if (names == null || names.length() == 0) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            return null;
Usage pattern --> value == null￿return null;
Diff line --> +            return null;
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            return null;
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            return null;
Usage pattern --> names == null￿return null;
Diff line --> +            return null;
Usage pattern --> jo == null￿break;
Diff line --> +            return null;
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            return null;
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> value == null￿return null;
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> names == null￿return null;
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> jo == null￿break;
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        StringBuffer sb = new StringBuffer();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> value == null￿return null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> names == null￿return null;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> jo == null￿break;
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        for (int i = 0; i < ja.length(); i += 1) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> value == null￿return null;
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> names == null￿return null;
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> jo == null￿break;
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            JSONObject jo = ja.optJSONObject(i);
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            if (jo != null) {
Usage pattern --> value == null￿return null;
Diff line --> +            if (jo != null) {
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            if (jo != null) {
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            if (jo != null) {
Usage pattern --> names == null￿return null;
Diff line --> +            if (jo != null) {
Usage pattern --> jo == null￿break;
Diff line --> +            if (jo != null) {
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            if (jo != null) {
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Null usage pattern was added at revision da6b1b03cc7d21c11e543c8549fcfda5b7511583
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> value == null￿return null;
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> names == null￿return null;
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> jo == null￿break;
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +                sb.append(rowToString(jo.toJSONArray(names)));
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +            }
Usage pattern --> value == null￿return null;
Diff line --> +            }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +            }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +            }
Usage pattern --> names == null￿return null;
Diff line --> +            }
Usage pattern --> jo == null￿break;
Diff line --> +            }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +            }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        }
Usage pattern --> value == null￿return null;
Diff line --> +        }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        }
Usage pattern --> names == null￿return null;
Diff line --> +        }
Usage pattern --> jo == null￿break;
Diff line --> +        }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +        return sb.toString();
Usage pattern --> value == null￿return null;
Diff line --> +        return sb.toString();
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +        return sb.toString();
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +        return sb.toString();
Usage pattern --> names == null￿return null;
Diff line --> +        return sb.toString();
Usage pattern --> jo == null￿break;
Diff line --> +        return sb.toString();
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +        return sb.toString();
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +    }
Usage pattern --> value == null￿return null;
Diff line --> +    }
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +    }
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +    }
Usage pattern --> names == null￿return null;
Diff line --> +    }
Usage pattern --> jo == null￿break;
Diff line --> +    }
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +    }
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
Diff line --> +}
Usage pattern --> value == null￿return null;
Diff line --> +}
Usage pattern --> ja != null￿return ja != null ? ja.toJSONObject(names) :  null;
Diff line --> +}
Usage pattern --> object != null￿String string = object.toString();
Diff line --> +}
Usage pattern --> names == null￿return null;
Diff line --> +}
Usage pattern --> jo == null￿break;
Diff line --> +}
Usage pattern --> names != null￿return rowToString(names) + toString(names, ja);
Diff line --> +}
Usage pattern --> jo != null￿sb.append(rowToString(jo.toJSONArray(names)));
********Collections usage found in testClass.java********
********Optional Usage found in testClass.java********
********Catch Blocks found in testClass.java********

Diff of da6b1b03cc7d21c11e543c8549fcfda5b7511583 and dcf67baa545756ab03d2000c4edf326e09009f4e:
	--> Added generic fields = 1
	--> Added generic methods with type bounds = 1
 	--> Added generic invocations = 1
 	--> Added methods with generic parameters = 0
 	--> Added generic variable declarations = 0

 Reverted revision da6b1b03cc7d21c11e543c8549fcfda5b7511583 to dcf67baa545756ab03d2000c4edf326e09009f4e

************Analysis complete************
Brittany Johnson added generic field count = 1 in repository dummy-repo3
Brittany Johnson added generic method count = 1 in repository dummy-repo3
Brittany Johnson added generic invocations count = 1 in repository dummy-repo3
Brittany Johnson added methods with generic parameters count = 0 in repository dummy-repo3
Brittany Johnson added generic variable declarations count = 0 in repository dummy-repo3
