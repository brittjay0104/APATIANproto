0
Pierre-Alexandre Meyer is responsible for commit da8cdcc30b6db36ca687fc880ac3dff2faec0d14
Pierre-Alexandre Meyer is responsible for commit 85d552fa173127c8d5cbce25f6b80775cdb0fd29
Pierre-Alexandre Meyer is responsible for commit 16286a2ff86d4a591f87fd70c30312769d34041a
Pierre-Alexandre Meyer is responsible for commit 69fd65821a04738069147ffd076d28abef092ad6
Pierre-Alexandre Meyer is responsible for commit c17fcfa64c8b503984336025caf3f31b70fe0f21
Pierre-Alexandre Meyer is responsible for commit 71dea49408d27125a407924e59d4d3659607ccf6
Pierre-Alexandre Meyer is responsible for commit af9f94bcf6471f1905dab64c15469d37d9337595
Pierre-Alexandre Meyer is responsible for commit d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2
Pierre-Alexandre Meyer is responsible for commit 71ab5637c74200b9970db32a87114c7303b5cd52
Pierre-Alexandre Meyer is responsible for commit c05e65e37c5c0d5d3a430fda6edb99548b8e42ca
Pierre-Alexandre Meyer is responsible for commit cd39edee74d7fb47cb881d862652084559941bca
Pierre-Alexandre Meyer is responsible for commit 99090114ea9ddfdaf18f0573736d0a64c59bfe68
Pierre-Alexandre Meyer is responsible for commit cc5b7508a3a8950a9ba978456723d7def2bd88f4
Pierre-Alexandre Meyer is responsible for commit 43382e8e61de009973dda8d04bf38bcea1927ff5
Pierre-Alexandre Meyer is responsible for commit a3777cdda12e5f1390aa42805cf35e39597b9e10
Pierre-Alexandre Meyer is responsible for commit ccd1c1763c7602ecbdceef3139ea3b87431bb615
Pierre-Alexandre Meyer is responsible for commit ecf8d8b63173fe8a6234044cfe102d5e3fa4f713
Pierre-Alexandre Meyer is responsible for commit 8675b65177f97cf8f37a8d6b0799137ea3a8f683
Pierre-Alexandre Meyer is responsible for commit 704690ac282d66af728cdbdb0076b741f3cc06ca
Pierre-Alexandre Meyer is responsible for commit 087747ae2540775383a96da9c9c204689b29a329
Pierre-Alexandre Meyer is responsible for commit 8ab4cf7ad0483f3e359640e16bbe262157fe720c
Pierre-Alexandre Meyer is responsible for commit cefcc61ae2c5cba69339e4b8c77937cf63902ba6
Pierre-Alexandre Meyer is responsible for commit fbf7d07ddd5994d13ac9f57cbb0895aa1a7cf426
Pierre-Alexandre Meyer is responsible for commit 8d9dc36469744802888ad4b5db8c3dc5e9bb7303
Pierre-Alexandre Meyer is responsible for commit 6c206b1d8d4c86f68d3e3427d43668214f366d75
Pierre-Alexandre Meyer is responsible for commit b6d5315c8173aca46757b0f5dea3dbc0fd54e752
Pierre-Alexandre Meyer is responsible for commit 90850e110e7c8f85aa5ae1078677a5feeada0e03
Pierre-Alexandre Meyer is responsible for commit a7c52a0cbbbd81c21b2888f03d39f7d421a17d33
Pierre-Alexandre Meyer is responsible for commit aba3b84fcc9605515abca1d992fec8ad143510ee
Pierre-Alexandre Meyer is responsible for commit 12ad1da78191648e5a71fb9e5de70174ac2d3709
Pierre-Alexandre Meyer is responsible for commit b854edff84e483fd89df1b883cc5dd2d0bd6d317
Pierre-Alexandre Meyer is responsible for commit 718f435d067229ee500cfe68a0b1fae6f53a1ad1
Pierre-Alexandre Meyer is responsible for commit 3199bdb534c8b46ffc52d60fe5e37a29c6fb837d
Pierre-Alexandre Meyer is responsible for commit dae6fa2e9cc1342b0037e5062be99bec44605f23
Pierre-Alexandre Meyer is responsible for commit b119784e2df0ff5bcd2734e9e9c7b9cccb42e967
Pierre-Alexandre Meyer is responsible for commit 08803f170c6d8a61261701e2bad70512e488d8c3
Pierre-Alexandre Meyer is responsible for commit abb38ba88406dc713abf68bda702fcc64b3881d3
Pierre-Alexandre Meyer is responsible for commit d5b6f1ee93ae73b0fed8683bd622f5852b371a9d
Pierre-Alexandre Meyer is responsible for commit 2560e0a0814e10591ccf09b9560777857df99334
Pierre-Alexandre Meyer is responsible for commit 5ddb7ba7433c4442611159499e965a7afdfc9f52
Pierre-Alexandre Meyer is responsible for commit f6b07a9c7d5ff237d3badb8f8b538cf58b243230
Pierre-Alexandre Meyer is responsible for commit bddf5aad3121c88f324d4dd4a10841922f5b8f21
Pierre-Alexandre Meyer is responsible for commit 69e87c98b20b9654d438e54857be5b8160994600
Pierre-Alexandre Meyer is responsible for commit 093a85a75a28aff9523c66af3952885fdb18ed96
Pierre-Alexandre Meyer is responsible for commit c63fc45fcedc58f534ed31bc7a7192a3ba14fa34
Pierre-Alexandre Meyer is responsible for commit 4988e2f70ed1144124a267d2ab11b71da511479b
Pierre-Alexandre Meyer is responsible for commit 8616215d8357bb81d987a91705ac309219cf26f9
Pierre-Alexandre Meyer is responsible for commit 78fdddc98b4868c351eef67a768471c1dfc45a9f
Pierre-Alexandre Meyer is responsible for commit 968776553650079a0fea4862c11b9c836357d254
Pierre-Alexandre Meyer is responsible for commit db489b2f57f5bc7b5243a8eaa920ca0204618164
Pierre-Alexandre Meyer is responsible for commit 21665da61adb4c5e5adb00b03c96d90d199523e7
Pierre-Alexandre Meyer is responsible for commit f5e06a4a467d0e22a0ac10d51cb7dba6bb04632c
Pierre-Alexandre Meyer is responsible for commit 631110da150de806d737d6184b7f60073f79cae8
Pierre-Alexandre Meyer is responsible for commit 129dd6fa9a5f4634b514dc84793189d43074ccf0
Pierre-Alexandre Meyer is responsible for commit 97279f88aa4efb0449f8e2294ff3c4220b3536e9
Pierre-Alexandre Meyer is responsible for commit 45cf6594bf0a46356da0ccd7813661708f918128
Pierre-Alexandre Meyer is responsible for commit 7736067bbb52467053edbb34e0d194d4f8a7dce1
Pierre-Alexandre Meyer is responsible for commit 374f6e960786a1e2eced8660d8f469cf83d30005
Pierre-Alexandre Meyer is responsible for commit db4bcaf1e28ff0959d9accc90bbf1414c821511c
Pierre-Alexandre Meyer is responsible for commit f1ca87a22ada5a0162bbe076d134ef12c3f6ed7e
Pierre-Alexandre Meyer is responsible for commit b723e232f41ff1b006896f62afeb383509756c94
Pierre-Alexandre Meyer is responsible for commit 804c19db3cd306282e06f5c21baeda6d192c9d9e
Pierre-Alexandre Meyer is responsible for commit d899b6b20277f60e21d60f45cf08e7944c5d38f3
Pierre-Alexandre Meyer is responsible for commit 947b7b476371b87c3625c247e211f32202522ec7
Pierre-Alexandre Meyer is responsible for commit 04d612245d2f56f50f500432ae9daf6e8be303a1
Pierre-Alexandre Meyer is responsible for commit 15bfe80cc6bb44062610a7458a04df4663646a49
Pierre-Alexandre Meyer is responsible for commit 1260f956c0359cab6b7ef440a3f227037bf714fe
Pierre-Alexandre Meyer is responsible for commit 753ac3d08360cbe15c7a1b6cf78b034c74c52359
Pierre-Alexandre Meyer is responsible for commit 5b913882565911612b1c399abbd6c0f5162e3fb9
Pierre-Alexandre Meyer is responsible for commit 30c95be6320d27a58d041605477a5a87273fe982
Pierre-Alexandre Meyer is responsible for commit 40945099366817768f300afd37cb18a897762b84
Pierre-Alexandre Meyer is responsible for commit 6b980f7491543701a4e7fe169308cb7e88085cd3
Pierre-Alexandre Meyer is responsible for commit 3036fbcf3b9a83da4dbc6fcfc081d4d6ff63586d
Pierre-Alexandre Meyer is responsible for commit e08be1f4755a4e17fce75c88ca86d144b45e4ce3
Pierre-Alexandre Meyer is responsible for commit 753c021e21b96bb82881f63fb5af2efb736bbbd8
Pierre-Alexandre Meyer is responsible for commit fc6e050942ed0a9620d1e7d47550b29e13bbecf3
Pierre-Alexandre Meyer is responsible for commit 5bc14b4224345925725cd0d1c564bc4bbb7a84d5
Pierre-Alexandre Meyer is responsible for commit 36e744a62921b7656fb76acf7da6068ac53cf4d9
Pierre-Alexandre Meyer is responsible for commit 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Pierre-Alexandre Meyer is responsible for commit 7cc9ae3eb71879ba30b93dd0f812f2547ec5ba37
Pierre-Alexandre Meyer is responsible for commit c8ee69226e347835c1a6207df0da325f269d6c61
Pierre-Alexandre Meyer is responsible for commit e1da53c8687ff88cad51bb3c66447631c6ff12ed
Pierre-Alexandre Meyer is responsible for commit 0280988b672f2c23182ecb5d75b9f1d8755bd260
Pierre-Alexandre Meyer is responsible for commit 46c809f276f87162418184595ad45150e5bb0ba1
Pierre-Alexandre Meyer is responsible for commit 640c75ee579880340da2a37f5871c19cb50ad6ce
Pierre-Alexandre Meyer is responsible for commit c87f218b84a8fb3902447639f3c3d364cf7007b4
Pierre-Alexandre Meyer is responsible for commit d39391591533e845fe79049ba864beecf0dd566d
Pierre-Alexandre Meyer is responsible for commit c80b8b0f5fbebd03b1a7acacb5978c528c94cb81
Pierre-Alexandre Meyer is responsible for commit 639eae6746d2f06086556cfc84570bb4578d11f8
Pierre-Alexandre Meyer is responsible for commit d51418d07aead43f9e1cdcd8a4131be81303d58f
Pierre-Alexandre Meyer is responsible for commit 0345f8a29b65295b53fc3823225c64746619c578
Pierre-Alexandre Meyer is responsible for commit 08094f019e3b41ddb9406eb6b254725f03ef019f
Pierre-Alexandre Meyer is responsible for commit 53f146478655b6a6f4a3f3f3c53ac7e476029c5d
Pierre-Alexandre Meyer is responsible for commit 211b35fea0dae37602d59b4855fae01fb6745618
Pierre-Alexandre Meyer is responsible for commit 56d5ae8e8a33cfb965b41a5ee83f251fd5648fc2
Pierre-Alexandre Meyer is responsible for commit 8a29d847737cec44f68a83144c763b05ef98ef65
Pierre-Alexandre Meyer is responsible for commit 3bb87969da2c6dc8c68f44a2843c1f37f5b4a79e
Pierre-Alexandre Meyer is responsible for commit c9401faf3c4ebc24b0680ac26cd1275ba6872b6a
Pierre-Alexandre Meyer is responsible for commit 6bb569ebdb41d45ac65b16dd6d145c09e0715463
Pierre-Alexandre Meyer is responsible for commit ea54c4b3c9b4d8bcaad777b5b43587d9be9e5c9d
Pierre-Alexandre Meyer is responsible for commit 722c3ddb20d74aedf0bb5306d0b2d97f2ae7a7a7
Pierre-Alexandre Meyer is responsible for commit fd7df378655c2778d4171fa68a94af701346dd36
Pierre-Alexandre Meyer is responsible for commit 97930c593dd77b4ef31f8af59eff5759304f5c63
Pierre-Alexandre Meyer is responsible for commit 545f52e5bac95d845ebcf445f7d0f23db84c6264
Pierre-Alexandre Meyer is responsible for commit 5de0d31537cb72acd128fef81f3ae6ab17eadfd5
Pierre-Alexandre Meyer is responsible for commit c557d4af51f1b7cfc6bdf53557f7249927010993
Pierre-Alexandre Meyer is responsible for commit 259274294d376e8dd46bfb0a2e15df3c506bf349
Pierre-Alexandre Meyer is responsible for commit 8b98cc5b3eabc7a5a5d65951e1f51141a64da7d0
Pierre-Alexandre Meyer is responsible for commit a8c361d81920b82ecc6409b76a27bfa3eb1f1dc7
Pierre-Alexandre Meyer is responsible for commit 17ff18984b5fca27b6ee7cdea0ab3e7838d64725
Pierre-Alexandre Meyer is responsible for commit fd6b27b9821dfbba8d350e100eed91b8432b576b
Pierre-Alexandre Meyer is responsible for commit be298f64bfc78ebfdfc5a430994cd979098aa682
Pierre-Alexandre Meyer is responsible for commit bf926adf8e92bddfc69d014b6e054507232f8fb4
Pierre-Alexandre Meyer is responsible for commit f2adbb3c600a29ecf357b16c5fb7770ac81b8410
Pierre-Alexandre Meyer is responsible for commit d41aead7dc8cd838144e0ee4789ab5eff7123f97
Pierre-Alexandre Meyer is responsible for commit 29b593cba38342be64ca78bf65974d163eebdd56
Pierre-Alexandre Meyer is responsible for commit d5d991133633bb07c8dfd340c72b0db7fa1f1a4b
Pierre-Alexandre Meyer is responsible for commit dc73977496bfe2aa059a0dd8e883d28d453fe3a0
Pierre-Alexandre Meyer is responsible for commit 9f8330fee45d093e3e4bfceec71156af9ef8b5b3
Pierre-Alexandre Meyer is responsible for commit 296ea6ed2f516a3bdab1e599433fb65f643e3dc1
Pierre-Alexandre Meyer is responsible for commit 7843aff36e58322f1b3b82247d32da1c3402f3ac
Pierre-Alexandre Meyer is responsible for commit 7c53faaf524bb109ed4023b29a4b103d50d28faa
Pierre-Alexandre Meyer is responsible for commit 4858408cd72453fbfa67fd0ba144070b3b67f9cd
Pierre-Alexandre Meyer is responsible for commit 070eb520318e89581ddbb57efd3bfa166f18c58a
Pierre-Alexandre Meyer is responsible for commit ff114c32f6a88d9479f377ea24e15ffc414c6fd7
Pierre-Alexandre Meyer is responsible for commit 7823d95381c7d7f243ed0c421a66f074f5ea9e73
Pierre-Alexandre Meyer is responsible for commit 850ed9e516eb7126b325dcfa7d96dfd320e2fe38
Pierre-Alexandre Meyer is responsible for commit 468bb5fe658332594caf79f83d43341b9a30e321
Pierre-Alexandre Meyer is responsible for commit 0d57d546baa72802e1d9eb8110c08309e86c39b3
Pierre-Alexandre Meyer is responsible for commit 117d33633181af72584d04cf5f8431411b7bed7b
Pierre-Alexandre Meyer is responsible for commit 712b7153efb9c0f4ec01568bd60705e9f871fd3e
Pierre-Alexandre Meyer is responsible for commit b7537614f9af1c38f0640e86ab481b8534d1c206
Pierre-Alexandre Meyer is responsible for commit d937718d6d8a6d0ab625b505a45ab5d6efc00919
Pierre-Alexandre Meyer is responsible for commit 1d3732e59c7e650d8bfe2fd80bb12c1100a6d9f2
Pierre-Alexandre Meyer is responsible for commit 9781c8771e09692baf0d27a16b2299fa5b0508b2
Pierre-Alexandre Meyer is responsible for commit 66c6672ed61905caba006d89ae7be52d0f53e88b
Pierre-Alexandre Meyer is responsible for commit e2d8811d8285ee726ffe0d55b4e5d920de530efd
Pierre-Alexandre Meyer is responsible for commit 9bf287c3beea490b7b3f181f97548e0ea16a2b52
Pierre-Alexandre Meyer is responsible for commit a0c090060561057482deef57011435467e755c7f
Pierre-Alexandre Meyer is responsible for commit 779e263ce44cd8372ea992add0884c89d8dc3242
Pierre-Alexandre Meyer is responsible for commit eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
Pierre-Alexandre Meyer is responsible for commit 95d21895a20cb67502e9b24f3940cf816c833345
Pierre-Alexandre Meyer is responsible for commit 5b26e147929471b7dd8d49e21a3a40b3f8f8523e
Pierre-Alexandre Meyer is responsible for commit 81044cf4026c67c99291f6a82b0489a08c4e0126
Pierre-Alexandre Meyer is responsible for commit 50523650f906f9885a4c78f3594a582d168e894f
Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.

Reverted to commit da8cdcc30b6db36ca687fc880ac3dff2faec0d14

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 85d552fa173127c8d5cbce25f6b80775cdb0fd29 and da8cdcc30b6db36ca687fc880ac3dff2faec0d14:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit 85d552fa173127c8d5cbce25f6b80775cdb0fd29

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 16286a2ff86d4a591f87fd70c30312769d34041a and 85d552fa173127c8d5cbce25f6b80775cdb0fd29:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit 16286a2ff86d4a591f87fd70c30312769d34041a

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 69fd65821a04738069147ffd076d28abef092ad6 and 16286a2ff86d4a591f87fd70c30312769d34041a:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit 69fd65821a04738069147ffd076d28abef092ad6

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of c17fcfa64c8b503984336025caf3f31b70fe0f21 and 69fd65821a04738069147ffd076d28abef092ad6:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit c17fcfa64c8b503984336025caf3f31b70fe0f21

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 71dea49408d27125a407924e59d4d3659607ccf6 and c17fcfa64c8b503984336025caf3f31b70fe0f21:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit 71dea49408d27125a407924e59d4d3659607ccf6

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of af9f94bcf6471f1905dab64c15469d37d9337595 and 71dea49408d27125a407924e59d4d3659607ccf6:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit af9f94bcf6471f1905dab64c15469d37d9337595

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GoodwillGuiceListener.java to ./goodwill/ repository source files.
Added GoodwillServicesModule.java to ./goodwill/ repository source files.
Added GoodwillSinkProvider.java to ./goodwill/ repository source files.
Added GoodwillStoreProvider.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServicesModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:
sinkType == null?return null;

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStoreProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2 and af9f94bcf6471f1905dab64c15469d37d9337595:
	--> Added null checks = 0
	--> Removed null checks = 0
	--> Null dereferences checked for null = 0

Reverted to commit d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillSinkProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillGuiceListener.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSinkProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 71ab5637c74200b9970db32a87114c7303b5cd52 and d3ebeae27e05ecf1eeaea4022fc1851eafaf53e2:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit 71ab5637c74200b9970db32a87114c7303b5cd52

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillSinkProvider.java************

Null checks:

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of c05e65e37c5c0d5d3a430fda6edb99548b8e42ca and 71ab5637c74200b9970db32a87114c7303b5cd52:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit c05e65e37c5c0d5d3a430fda6edb99548b8e42ca

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of cd39edee74d7fb47cb881d862652084559941bca and c05e65e37c5c0d5d3a430fda6edb99548b8e42ca:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit cd39edee74d7fb47cb881d862652084559941bca

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 99090114ea9ddfdaf18f0573736d0a64c59bfe68 and cd39edee74d7fb47cb881d862652084559941bca:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit 99090114ea9ddfdaf18f0573736d0a64c59bfe68

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of cc5b7508a3a8950a9ba978456723d7def2bd88f4 and 99090114ea9ddfdaf18f0573736d0a64c59bfe68:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit cc5b7508a3a8950a9ba978456723d7def2bd88f4

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 43382e8e61de009973dda8d04bf38bcea1927ff5 and cc5b7508a3a8950a9ba978456723d7def2bd88f4:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit 43382e8e61de009973dda8d04bf38bcea1927ff5

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of a3777cdda12e5f1390aa42805cf35e39597b9e10 and 43382e8e61de009973dda8d04bf38bcea1927ff5:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit a3777cdda12e5f1390aa42805cf35e39597b9e10

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of ccd1c1763c7602ecbdceef3139ea3b87431bb615 and a3777cdda12e5f1390aa42805cf35e39597b9e10:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit ccd1c1763c7602ecbdceef3139ea3b87431bb615

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of ecf8d8b63173fe8a6234044cfe102d5e3fa4f713 and ccd1c1763c7602ecbdceef3139ea3b87431bb615:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit ecf8d8b63173fe8a6234044cfe102d5e3fa4f713

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 8675b65177f97cf8f37a8d6b0799137ea3a8f683 and ecf8d8b63173fe8a6234044cfe102d5e3fa4f713:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit 8675b65177f97cf8f37a8d6b0799137ea3a8f683

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
config.getSinkFirstExtraSQL() != null?success = executeExtraSql(config.getSinkDBFirstHost(), config.getSinkDBFirstPort(), config.getSinkDBFirstSchema(),
                    config.getSinkDBFirstUsername(), config.getSinkDBFirstPassword(), config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?success = executeExtraSql(config.getSinkDBSecondHost(), config.getSinkDBSecondPort(), config.getSinkDBSecondSchema(),
                        config.getSinkDBSecondUsername(), config.getSinkDBSecondPassword(), config.getSinkSecondExtraSQL(), schema);
config.getSinkFirstExtraSQL() != null?info += getUnescapedStatement(config.getSinkFirstExtraSQL(), schema);
config.getSinkSecondExtraSQL() != null?info += getUnescapedStatement(config.getSinkSecondExtraSQL(), schema);

Null fields: 
	--> config

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 704690ac282d66af728cdbdb0076b741f3cc06ca and 8675b65177f97cf8f37a8d6b0799137ea3a8f683:
	--> Added null checks = 0
	--> Removed null checks = 2
	--> Null dereferences checked for null = 0

Reverted to commit 704690ac282d66af728cdbdb0076b741f3cc06ca

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
Null check was removed at revision 704690ac282d66af728cdbdb0076b741f3cc06ca
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> config
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision 704690ac282d66af728cdbdb0076b741f3cc06ca
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> config
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision 704690ac282d66af728cdbdb0076b741f3cc06ca
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 087747ae2540775383a96da9c9c204689b29a329 and 704690ac282d66af728cdbdb0076b741f3cc06ca:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 087747ae2540775383a96da9c9c204689b29a329

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> config
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 8ab4cf7ad0483f3e359640e16bbe262157fe720c and 087747ae2540775383a96da9c9c204689b29a329:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 8ab4cf7ad0483f3e359640e16bbe262157fe720c

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of cefcc61ae2c5cba69339e4b8c77937cf63902ba6 and 8ab4cf7ad0483f3e359640e16bbe262157fe720c:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit cefcc61ae2c5cba69339e4b8c77937cf63902ba6

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of fbf7d07ddd5994d13ac9f57cbb0895aa1a7cf426 and cefcc61ae2c5cba69339e4b8c77937cf63902ba6:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit fbf7d07ddd5994d13ac9f57cbb0895aa1a7cf426

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 8d9dc36469744802888ad4b5db8c3dc5e9bb7303 and fbf7d07ddd5994d13ac9f57cbb0895aa1a7cf426:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 8d9dc36469744802888ad4b5db8c3dc5e9bb7303

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 6c206b1d8d4c86f68d3e3427d43668214f366d75 and 8d9dc36469744802888ad4b5db8c3dc5e9bb7303:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 6c206b1d8d4c86f68d3e3427d43668214f366d75

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added DAOAccess.java to ./goodwill/ repository source files.
Added DAOBoneCPAccess.java to ./goodwill/ repository source files.
Added DAOUtil.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file DAOUtil.java************

Null checks:
connection != null?try {
                connection.close();
            }
            catch (SQLException e) {
                log.warn("Closing Connection failed: " + e.getLocalizedMessage(), e);
            }
statement != null?try {
                statement.close();
            }
            catch (SQLException e) {
                log.warn("Closing Statement failed: " + e.getLocalizedMessage(), e);
            }
resultSet != null?try {
                resultSet.close();
            }
            catch (SQLException e) {
                log.warn("Closing ResultSet failed: " + e.getLocalizedMessage(), e);
            }

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> tableName
	--> access

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
	--> connection
	--> select
	--> result
In method updateType found:
	--> connection
	--> select
	--> inserts
	--> updates
	--> result
In method deleteType found:
	--> connection
	--> delete
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of b6d5315c8173aca46757b0f5dea3dbc0fd54e752 and 6c206b1d8d4c86f68d3e3427d43668214f366d75:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit b6d5315c8173aca46757b0f5dea3dbc0fd54e752

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file DAOBoneCPAccess.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 90850e110e7c8f85aa5ae1078677a5feeada0e03 and b6d5315c8173aca46757b0f5dea3dbc0fd54e752:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 90850e110e7c8f85aa5ae1078677a5feeada0e03

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of a7c52a0cbbbd81c21b2888f03d39f7d421a17d33 and 90850e110e7c8f85aa5ae1078677a5feeada0e03:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit a7c52a0cbbbd81c21b2888f03d39f7d421a17d33

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of aba3b84fcc9605515abca1d992fec8ad143510ee and a7c52a0cbbbd81c21b2888f03d39f7d421a17d33:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit aba3b84fcc9605515abca1d992fec8ad143510ee

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 12ad1da78191648e5a71fb9e5de70174ac2d3709 and aba3b84fcc9605515abca1d992fec8ad143510ee:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 12ad1da78191648e5a71fb9e5de70174ac2d3709

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of b854edff84e483fd89df1b883cc5dd2d0bd6d317 and 12ad1da78191648e5a71fb9e5de70174ac2d3709:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit b854edff84e483fd89df1b883cc5dd2d0bd6d317

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeName == null?return Response.status(Response.Status.BAD_REQUEST).build();
typeFound != null?if (store.deleteType(typeFound)) {
                    return Response.noContent().build();
                }
                else {
                    return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
                }

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 718f435d067229ee500cfe68a0b1fae6f53a1ad1 and b854edff84e483fd89df1b883cc5dd2d0bd6d317:
	--> Added null checks = 0
	--> Removed null checks = 5
	--> Null dereferences checked for null = 0

Reverted to commit 718f435d067229ee500cfe68a0b1fae6f53a1ad1

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 718f435d067229ee500cfe68a0b1fae6f53a1ad1
Null check was added at revision 718f435d067229ee500cfe68a0b1fae6f53a1ad1
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
Null check was added at revision 718f435d067229ee500cfe68a0b1fae6f53a1ad1
Null check was added at revision 718f435d067229ee500cfe68a0b1fae6f53a1ad1
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 3199bdb534c8b46ffc52d60fe5e37a29c6fb837d and 718f435d067229ee500cfe68a0b1fae6f53a1ad1:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit 3199bdb534c8b46ffc52d60fe5e37a29c6fb837d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of dae6fa2e9cc1342b0037e5062be99bec44605f23 and 3199bdb534c8b46ffc52d60fe5e37a29c6fb837d:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit dae6fa2e9cc1342b0037e5062be99bec44605f23

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of b119784e2df0ff5bcd2734e9e9c7b9cccb42e967 and dae6fa2e9cc1342b0037e5062be99bec44605f23:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit b119784e2df0ff5bcd2734e9e9c7b9cccb42e967

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 08803f170c6d8a61261701e2bad70512e488d8c3 and b119784e2df0ff5bcd2734e9e9c7b9cccb42e967:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit 08803f170c6d8a61261701e2bad70512e488d8c3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of abb38ba88406dc713abf68bda702fcc64b3881d3 and 08803f170c6d8a61261701e2bad70512e488d8c3:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit abb38ba88406dc713abf68bda702fcc64b3881d3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of d5b6f1ee93ae73b0fed8683bd622f5852b371a9d and abb38ba88406dc713abf68bda702fcc64b3881d3:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit d5b6f1ee93ae73b0fed8683bd622f5852b371a9d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 2560e0a0814e10591ccf09b9560777857df99334 and d5b6f1ee93ae73b0fed8683bd622f5852b371a9d:
	--> Added null checks = 4
	--> Removed null checks = 5
	--> Null dereferences checked for null = 2

Reverted to commit 2560e0a0814e10591ccf09b9560777857df99334

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision 2560e0a0814e10591ccf09b9560777857df99334
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
Null check was removed at revision 2560e0a0814e10591ccf09b9560777857df99334
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 5ddb7ba7433c4442611159499e965a7afdfc9f52 and 2560e0a0814e10591ccf09b9560777857df99334:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit 5ddb7ba7433c4442611159499e965a7afdfc9f52

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of f6b07a9c7d5ff237d3badb8f8b538cf58b243230 and 5ddb7ba7433c4442611159499e965a7afdfc9f52:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit f6b07a9c7d5ff237d3badb8f8b538cf58b243230

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of bddf5aad3121c88f324d4dd4a10841922f5b8f21 and f6b07a9c7d5ff237d3badb8f8b538cf58b243230:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit bddf5aad3121c88f324d4dd4a10841922f5b8f21

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 69e87c98b20b9654d438e54857be5b8160994600 and bddf5aad3121c88f324d4dd4a10841922f5b8f21:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit 69e87c98b20b9654d438e54857be5b8160994600

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 093a85a75a28aff9523c66af3952885fdb18ed96 and 69e87c98b20b9654d438e54857be5b8160994600:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit 093a85a75a28aff9523c66af3952885fdb18ed96

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added SetupJULBridge.java to ./goodwill/ repository source files.
Added GoodwillServerModule.java to ./goodwill/ repository source files.
Added SetupServer.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupJULBridge.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file SetupServer.java************

Null checks:
guiceModule == null?throw new IllegalStateException("Never found the Guice Module to use!");

Null fields: 
	--> guiceModule

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of c63fc45fcedc58f534ed31bc7a7192a3ba14fa34 and 093a85a75a28aff9523c66af3952885fdb18ed96:
	--> Added null checks = 4
	--> Removed null checks = 7
	--> Null dereferences checked for null = 2

Reverted to commit c63fc45fcedc58f534ed31bc7a7192a3ba14fa34

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision c63fc45fcedc58f534ed31bc7a7192a3ba14fa34
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 4988e2f70ed1144124a267d2ab11b71da511479b and c63fc45fcedc58f534ed31bc7a7192a3ba14fa34:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 4988e2f70ed1144124a267d2ab11b71da511479b

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 8616215d8357bb81d987a91705ac309219cf26f9 and 4988e2f70ed1144124a267d2ab11b71da511479b:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 8616215d8357bb81d987a91705ac309219cf26f9

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 78fdddc98b4868c351eef67a768471c1dfc45a9f and 8616215d8357bb81d987a91705ac309219cf26f9:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 78fdddc98b4868c351eef67a768471c1dfc45a9f

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file GoodwillServerModule.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 968776553650079a0fea4862c11b9c836357d254 and 78fdddc98b4868c351eef67a768471c1dfc45a9f:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 968776553650079a0fea4862c11b9c836357d254

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of db489b2f57f5bc7b5243a8eaa920ca0204618164 and 968776553650079a0fea4862c11b9c836357d254:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit db489b2f57f5bc7b5243a8eaa920ca0204618164

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 21665da61adb4c5e5adb00b03c96d90d199523e7 and db489b2f57f5bc7b5243a8eaa920ca0204618164:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 21665da61adb4c5e5adb00b03c96d90d199523e7

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of f5e06a4a467d0e22a0ac10d51cb7dba6bb04632c and 21665da61adb4c5e5adb00b03c96d90d199523e7:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit f5e06a4a467d0e22a0ac10d51cb7dba6bb04632c

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?this.store.setSink(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }

Null fields: 
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
sink != null?for (int i = 0; i < thriftTypesList.size(); i++) {
                GoodwillSchema schema = thriftTypesList.get(i);
                schema.setSinkAddInfo(sink.addTypeInfo(schema));
                thriftTypesList.set(i, schema);

            }
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 631110da150de806d737d6184b7f60073f79cae8 and f5e06a4a467d0e22a0ac10d51cb7dba6bb04632c:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 631110da150de806d737d6184b7f60073f79cae8

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> config
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 129dd6fa9a5f4634b514dc84793189d43074ccf0 and 631110da150de806d737d6184b7f60073f79cae8:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 129dd6fa9a5f4634b514dc84793189d43074ccf0

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 97279f88aa4efb0449f8e2294ff3c4220b3536e9 and 129dd6fa9a5f4634b514dc84793189d43074ccf0:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 97279f88aa4efb0449f8e2294ff3c4220b3536e9

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 45cf6594bf0a46356da0ccd7813661708f918128 and 97279f88aa4efb0449f8e2294ff3c4220b3536e9:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 45cf6594bf0a46356da0ccd7813661708f918128

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 7736067bbb52467053edbb34e0d194d4f8a7dce1 and 45cf6594bf0a46356da0ccd7813661708f918128:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 7736067bbb52467053edbb34e0d194d4f8a7dce1

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of 374f6e960786a1e2eced8660d8f469cf83d30005 and 7736067bbb52467053edbb34e0d194d4f8a7dce1:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit 374f6e960786a1e2eced8660d8f469cf83d30005

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(schema)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(schema));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentSchemaName == null?currentSchemaName = line[0];

Null fields: 
	--> goodwillSchemata
	--> fileName

Null variables: 
In method parseFile found:
	--> currentSchema
	--> currentSchemaName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
schemata != null?currentThriftType = schemata.get(currentThriftTypeName);
schemata.get(currentThriftTypeName) != null?currentThriftType = schemata.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> goodwillSchemata

Null variables: 
In method buildGoodwillSchemaList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildGoodwillSchemaList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of db4bcaf1e28ff0959d9accc90bbf1414c821511c and 374f6e960786a1e2eced8660d8f469cf83d30005:
	--> Added null checks = 4
	--> Removed null checks = 8
	--> Null dereferences checked for null = 2

Reverted to commit db4bcaf1e28ff0959d9accc90bbf1414c821511c

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
Null check was removed at revision db4bcaf1e28ff0959d9accc90bbf1414c821511c
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision db4bcaf1e28ff0959d9accc90bbf1414c821511c
Null check was removed at revision db4bcaf1e28ff0959d9accc90bbf1414c821511c
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of f1ca87a22ada5a0162bbe076d134ef12c3f6ed7e and db4bcaf1e28ff0959d9accc90bbf1414c821511c:
	--> Added null checks = 4
	--> Removed null checks = 11
	--> Null dereferences checked for null = 2

Reverted to commit f1ca87a22ada5a0162bbe076d134ef12c3f6ed7e

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?store.addSinkInfo(sink);
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method parseFile found: 
	--> thriftField
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSql().getType() == null?statement.setNull(5, Types.VARCHAR);
field.getSql().getLength() == null?statement.setNull(6, Types.INTEGER);
field.getSql().getPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSql().getScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 

Diff of b723e232f41ff1b006896f62afeb383509756c94 and f1ca87a22ada5a0162bbe076d134ef12c3f6ed7e:
	--> Added null checks = 4
	--> Removed null checks = 11
	--> Null dereferences checked for null = 2

Reverted to commit b723e232f41ff1b006896f62afeb383509756c94

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
Null check was removed at revision b723e232f41ff1b006896f62afeb383509756c94
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 804c19db3cd306282e06f5c21baeda6d192c9d9e and b723e232f41ff1b006896f62afeb383509756c94:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 804c19db3cd306282e06f5c21baeda6d192c9d9e

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d899b6b20277f60e21d60f45cf08e7944c5d38f3 and 804c19db3cd306282e06f5c21baeda6d192c9d9e:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit d899b6b20277f60e21d60f45cf08e7944c5d38f3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 947b7b476371b87c3625c247e211f32202522ec7 and d899b6b20277f60e21d60f45cf08e7944c5d38f3:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 947b7b476371b87c3625c247e211f32202522ec7

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 04d612245d2f56f50f500432ae9daf6e8be303a1 and 947b7b476371b87c3625c247e211f32202522ec7:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 04d612245d2f56f50f500432ae9daf6e8be303a1

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 15bfe80cc6bb44062610a7458a04df4663646a49 and 04d612245d2f56f50f500432ae9daf6e8be303a1:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 15bfe80cc6bb44062610a7458a04df4663646a49

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 1260f956c0359cab6b7ef440a3f227037bf714fe and 15bfe80cc6bb44062610a7458a04df4663646a49:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 1260f956c0359cab6b7ef440a3f227037bf714fe

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 753ac3d08360cbe15c7a1b6cf78b034c74c52359 and 1260f956c0359cab6b7ef440a3f227037bf714fe:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 753ac3d08360cbe15c7a1b6cf78b034c74c52359

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 5b913882565911612b1c399abbd6c0f5162e3fb9 and 753ac3d08360cbe15c7a1b6cf78b034c74c52359:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 5b913882565911612b1c399abbd6c0f5162e3fb9

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 30c95be6320d27a58d041605477a5a87273fe982 and 5b913882565911612b1c399abbd6c0f5162e3fb9:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 30c95be6320d27a58d041605477a5a87273fe982

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 40945099366817768f300afd37cb18a897762b84 and 30c95be6320d27a58d041605477a5a87273fe982:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 40945099366817768f300afd37cb18a897762b84

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added ThriftRegistrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink
	--> config

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file ThriftRegistrar.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 6b980f7491543701a4e7fe169308cb7e88085cd3 and 40945099366817768f300afd37cb18a897762b84:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 6b980f7491543701a4e7fe169308cb7e88085cd3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 3036fbcf3b9a83da4dbc6fcfc081d4d6ff63586d and 6b980f7491543701a4e7fe169308cb7e88085cd3:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 3036fbcf3b9a83da4dbc6fcfc081d4d6ff63586d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of e08be1f4755a4e17fce75c88ca86d144b45e4ce3 and 3036fbcf3b9a83da4dbc6fcfc081d4d6ff63586d:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit e08be1f4755a4e17fce75c88ca86d144b45e4ce3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 753c021e21b96bb82881f63fb5af2efb736bbbd8 and e08be1f4755a4e17fce75c88ca86d144b45e4ce3:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 753c021e21b96bb82881f63fb5af2efb736bbbd8

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> DBHost
	--> DBPort
	--> DBName
	--> DBUsername
	--> DBPassword
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of fc6e050942ed0a9620d1e7d47550b29e13bbecf3 and 753c021e21b96bb82881f63fb5af2efb736bbbd8:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit fc6e050942ed0a9620d1e7d47550b29e13bbecf3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?return new Viewable("/registrar/show.jsp", typeFound);
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 5bc14b4224345925725cd0d1c564bc4bbb7a84d5 and fc6e050942ed0a9620d1e7d47550b29e13bbecf3:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 5bc14b4224345925725cd0d1c564bc4bbb7a84d5

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added Sink.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:
typeFound != null?if (sink.addType(typeFound)) {
                return Response.status(Response.Status.CREATED).build();
            }
            else {
                return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
            }

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(StringUtils.replace(extraSQL, "?", getTableName(thriftType)));
extraStatement != null?log.info(String.format("Running extra SQL in Netezza: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 36e744a62921b7656fb76acf7da6068ac53cf4d9 and 5bc14b4224345925725cd0d1c564bc4bbb7a84d5:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 36e744a62921b7656fb76acf7da6068ac53cf4d9

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added GoodwillSink.java to ./goodwill/ repository source files.
Added NetezzaSink.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(extraSQL);
extraStatement != null?log.info(String.format("Netezza sink extra SQL: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Sink.java************

Null checks:

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(extraSQL);
extraStatement != null?log.info(String.format("Netezza sink extra SQL: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:
sinkType == null?binder.bind(GoodwillSink.class).toProvider(Providers.<GoodwillSink>of(null));

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
sink != null?for (int i = 0; i < storeInJSON.length(); i++) {
                JSONObject type = (JSONObject) storeInJSON.get(i);
                String typeName = (String) type.get(ThriftType.JSON_THRIFT_TYPE_NAME);

                if (typeName != null) {
                    ThriftType thriftType = store.findByName(typeName);
                    if (thriftType != null) {
                        type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
                        storeInJSON.put(i, type);
                    }
                }
            }
typeName != null?ThriftType thriftType = store.findByName(typeName);
thriftType != null?type.put("sinkAddInfo", sink.addTypeInfo(thriftType));
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store
	--> sink

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:
extraSQL != null?extraStatement = connection.prepareStatement(extraSQL);
extraStatement != null?log.info(String.format("Netezza sink extra SQL: %s", extraStatement.executeBatch().toString()));
extraSQL != null?info += StringUtils.replace(extraSQL, "?", getTableName(thriftType));

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);
sqlType == null?return null;
sqlPrecision != null?if (sqlScale != null) {
                    fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
                }
                else {
                    fullSQLType = sqlType + "(" + sqlPrecision + ")";
                }
sqlScale != null?fullSQLType = sqlType + "(" + sqlPrecision + ", " + sqlScale + ")";
sqlLength != null?fullSQLType = sqlType + "(" + sqlLength + ")";
fullSQLType == null?fullSQLType = sqlType;

Null fields: 
	--> sqlType
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe and 36e744a62921b7656fb76acf7da6068ac53cf4d9:
	--> Added null checks = 4
	--> Removed null checks = 23
	--> Null dereferences checked for null = 2

Reverted to commit 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file NetezzaSink.java************

Null checks:

Null fields: 
	--> connection
	--> extraSQL
	--> tableNameFormat

Null variables: 
In method addType found:
	--> extraStatement
Null assignments: 
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillSink.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
Null check was added at revision 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 7cc9ae3eb71879ba30b93dd0f812f2547ec5ba37 and 80f76c4276cb5b442b20e93ba9ec4c0b1d27fcbe:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 7cc9ae3eb71879ba30b93dd0f812f2547ec5ba37

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
In method getFullSQLType found:
	--> fullSQLType
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of c8ee69226e347835c1a6207df0da325f269d6c61 and 7cc9ae3eb71879ba30b93dd0f812f2547ec5ba37:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit c8ee69226e347835c1a6207df0da325f269d6c61

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of e1da53c8687ff88cad51bb3c66447631c6ff12ed and c8ee69226e347835c1a6207df0da325f269d6c61:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit e1da53c8687ff88cad51bb3c66447631c6ff12ed

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 0280988b672f2c23182ecb5d75b9f1d8755bd260 and e1da53c8687ff88cad51bb3c66447631c6ff12ed:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 0280988b672f2c23182ecb5d75b9f1d8755bd260

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 46c809f276f87162418184595ad45150e5bb0ba1 and 0280988b672f2c23182ecb5d75b9f1d8755bd260:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 46c809f276f87162418184595ad45150e5bb0ba1

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 640c75ee579880340da2a37f5871c19cb50ad6ce and 46c809f276f87162418184595ad45150e5bb0ba1:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 640c75ee579880340da2a37f5871c19cb50ad6ce

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of c87f218b84a8fb3902447639f3c3d364cf7007b4 and 640c75ee579880340da2a37f5871c19cb50ad6ce:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit c87f218b84a8fb3902447639f3c3d364cf7007b4

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d39391591533e845fe79049ba864beecf0dd566d and c87f218b84a8fb3902447639f3c3d364cf7007b4:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit d39391591533e845fe79049ba864beecf0dd566d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of c80b8b0f5fbebd03b1a7acacb5978c528c94cb81 and d39391591533e845fe79049ba864beecf0dd566d:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit c80b8b0f5fbebd03b1a7acacb5978c528c94cb81

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 639eae6746d2f06086556cfc84570bb4578d11f8 and c80b8b0f5fbebd03b1a7acacb5978c528c94cb81:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 639eae6746d2f06086556cfc84570bb4578d11f8

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d51418d07aead43f9e1cdcd8a4131be81303d58f and 639eae6746d2f06086556cfc84570bb4578d11f8:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit d51418d07aead43f9e1cdcd8a4131be81303d58f

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 0345f8a29b65295b53fc3823225c64746619c578 and d51418d07aead43f9e1cdcd8a4131be81303d58f:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 0345f8a29b65295b53fc3823225c64746619c578

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 08094f019e3b41ddb9406eb6b254725f03ef019f and 0345f8a29b65295b53fc3823225c64746619c578:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14
GitAPIException thrown!
Cannot revert commit '08094f019e3b41ddb9406eb6b254725f03ef019f' because it has 2 parents, only commits with exactly one parent are supported

Reverted to commit 53f146478655b6a6f4a3f3f3c53ac7e476029c5d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 211b35fea0dae37602d59b4855fae01fb6745618 and 53f146478655b6a6f4a3f3f3c53ac7e476029c5d:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 211b35fea0dae37602d59b4855fae01fb6745618

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 56d5ae8e8a33cfb965b41a5ee83f251fd5648fc2 and 211b35fea0dae37602d59b4855fae01fb6745618:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 56d5ae8e8a33cfb965b41a5ee83f251fd5648fc2

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 8a29d847737cec44f68a83144c763b05ef98ef65 and 56d5ae8e8a33cfb965b41a5ee83f251fd5648fc2:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 8a29d847737cec44f68a83144c763b05ef98ef65

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 3bb87969da2c6dc8c68f44a2843c1f37f5b4a79e and 8a29d847737cec44f68a83144c763b05ef98ef65:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 3bb87969da2c6dc8c68f44a2843c1f37f5b4a79e

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of c9401faf3c4ebc24b0680ac26cd1275ba6872b6a and 3bb87969da2c6dc8c68f44a2843c1f37f5b4a79e:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14
GitAPIException thrown!
Cannot revert commit 'c9401faf3c4ebc24b0680ac26cd1275ba6872b6a' because it has 2 parents, only commits with exactly one parent are supported

Reverted to commit 6bb569ebdb41d45ac65b16dd6d145c09e0715463

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of ea54c4b3c9b4d8bcaad777b5b43587d9be9e5c9d and 6bb569ebdb41d45ac65b16dd6d145c09e0715463:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit ea54c4b3c9b4d8bcaad777b5b43587d9be9e5c9d

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 722c3ddb20d74aedf0bb5306d0b2d97f2ae7a7a7 and ea54c4b3c9b4d8bcaad777b5b43587d9be9e5c9d:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 722c3ddb20d74aedf0bb5306d0b2d97f2ae7a7a7

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of fd7df378655c2778d4171fa68a94af701346dd36 and 722c3ddb20d74aedf0bb5306d0b2d97f2ae7a7a7:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit fd7df378655c2778d4171fa68a94af701346dd36

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 97930c593dd77b4ef31f8af59eff5759304f5c63 and fd7df378655c2778d4171fa68a94af701346dd36:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 97930c593dd77b4ef31f8af59eff5759304f5c63

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 545f52e5bac95d845ebcf445f7d0f23db84c6264 and 97930c593dd77b4ef31f8af59eff5759304f5c63:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 545f52e5bac95d845ebcf445f7d0f23db84c6264

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 5de0d31537cb72acd128fef81f3ae6ab17eadfd5 and 545f52e5bac95d845ebcf445f7d0f23db84c6264:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 5de0d31537cb72acd128fef81f3ae6ab17eadfd5

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of c557d4af51f1b7cfc6bdf53557f7249927010993 and 5de0d31537cb72acd128fef81f3ae6ab17eadfd5:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit c557d4af51f1b7cfc6bdf53557f7249927010993

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 259274294d376e8dd46bfb0a2e15df3c506bf349 and c557d4af51f1b7cfc6bdf53557f7249927010993:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 259274294d376e8dd46bfb0a2e15df3c506bf349

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 8b98cc5b3eabc7a5a5d65951e1f51141a64da7d0 and 259274294d376e8dd46bfb0a2e15df3c506bf349:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 8b98cc5b3eabc7a5a5d65951e1f51141a64da7d0

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of a8c361d81920b82ecc6409b76a27bfa3eb1f1dc7 and 8b98cc5b3eabc7a5a5d65951e1f51141a64da7d0:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit a8c361d81920b82ecc6409b76a27bfa3eb1f1dc7

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 17ff18984b5fca27b6ee7cdea0ab3e7838d64725 and a8c361d81920b82ecc6409b76a27bfa3eb1f1dc7:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 17ff18984b5fca27b6ee7cdea0ab3e7838d64725

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of fd6b27b9821dfbba8d350e100eed91b8432b576b and 17ff18984b5fca27b6ee7cdea0ab3e7838d64725:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit fd6b27b9821dfbba8d350e100eed91b8432b576b

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of be298f64bfc78ebfdfc5a430994cd979098aa682 and fd6b27b9821dfbba8d350e100eed91b8432b576b:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit be298f64bfc78ebfdfc5a430994cd979098aa682

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of bf926adf8e92bddfc69d014b6e054507232f8fb4 and be298f64bfc78ebfdfc5a430994cd979098aa682:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit bf926adf8e92bddfc69d014b6e054507232f8fb4

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of f2adbb3c600a29ecf357b16c5fb7770ac81b8410 and bf926adf8e92bddfc69d014b6e054507232f8fb4:
	--> Added null checks = 25
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit f2adbb3c600a29ecf357b16c5fb7770ac81b8410

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision f2adbb3c600a29ecf357b16c5fb7770ac81b8410
Null check was added at revision f2adbb3c600a29ecf357b16c5fb7770ac81b8410
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d41aead7dc8cd838144e0ee4789ab5eff7123f97 and f2adbb3c600a29ecf357b16c5fb7770ac81b8410:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit d41aead7dc8cd838144e0ee4789ab5eff7123f97

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 29b593cba38342be64ca78bf65974d163eebdd56 and d41aead7dc8cd838144e0ee4789ab5eff7123f97:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 29b593cba38342be64ca78bf65974d163eebdd56

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d5d991133633bb07c8dfd340c72b0db7fa1f1a4b and 29b593cba38342be64ca78bf65974d163eebdd56:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit d5d991133633bb07c8dfd340c72b0db7fa1f1a4b

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of dc73977496bfe2aa059a0dd8e883d28d453fe3a0 and d5d991133633bb07c8dfd340c72b0db7fa1f1a4b:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit dc73977496bfe2aa059a0dd8e883d28d453fe3a0

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 9f8330fee45d093e3e4bfceec71156af9ef8b5b3 and dc73977496bfe2aa059a0dd8e883d28d453fe3a0:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 9f8330fee45d093e3e4bfceec71156af9ef8b5b3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 296ea6ed2f516a3bdab1e599433fb65f643e3dc1 and 9f8330fee45d093e3e4bfceec71156af9ef8b5b3:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 296ea6ed2f516a3bdab1e599433fb65f643e3dc1

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 7843aff36e58322f1b3b82247d32da1c3402f3ac and 296ea6ed2f516a3bdab1e599433fb65f643e3dc1:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 7843aff36e58322f1b3b82247d32da1c3402f3ac

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 7c53faaf524bb109ed4023b29a4b103d50d28faa and 7843aff36e58322f1b3b82247d32da1c3402f3ac:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 7c53faaf524bb109ed4023b29a4b103d50d28faa

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 4858408cd72453fbfa67fd0ba144070b3b67f9cd and 7c53faaf524bb109ed4023b29a4b103d50d28faa:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 4858408cd72453fbfa67fd0ba144070b3b67f9cd

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 070eb520318e89581ddbb57efd3bfa166f18c58a and 4858408cd72453fbfa67fd0ba144070b3b67f9cd:
	--> Added null checks = 27
	--> Removed null checks = 23
	--> Null dereferences checked for null = 14

Reverted to commit 070eb520318e89581ddbb57efd3bfa166f18c58a

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildThrifTtypeList found:
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was added at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
Null check was removed at revision 070eb520318e89581ddbb57efd3bfa166f18c58a
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of ff114c32f6a88d9479f377ea24e15ffc414c6fd7 and 070eb520318e89581ddbb57efd3bfa166f18c58a:
	--> Added null checks = 44
	--> Removed null checks = 39
	--> Null dereferences checked for null = 29
GitAPIException thrown!
Cannot revert commit 'ff114c32f6a88d9479f377ea24e15ffc414c6fd7' because it has 2 parents, only commits with exactly one parent are supported

Reverted to commit 7823d95381c7d7f243ed0c421a66f074f5ea9e73

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 850ed9e516eb7126b325dcfa7d96dfd320e2fe38 and 7823d95381c7d7f243ed0c421a66f074f5ea9e73:
	--> Added null checks = 44
	--> Removed null checks = 39
	--> Null dereferences checked for null = 29

Reverted to commit 850ed9e516eb7126b325dcfa7d96dfd320e2fe38

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 468bb5fe658332594caf79f83d43341b9a30e321 and 850ed9e516eb7126b325dcfa7d96dfd320e2fe38:
	--> Added null checks = 44
	--> Removed null checks = 39
	--> Null dereferences checked for null = 29

Reverted to commit 468bb5fe658332594caf79f83d43341b9a30e321

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 0d57d546baa72802e1d9eb8110c08309e86c39b3 and 468bb5fe658332594caf79f83d43341b9a30e321:
	--> Added null checks = 44
	--> Removed null checks = 39
	--> Null dereferences checked for null = 29

Reverted to commit 0d57d546baa72802e1d9eb8110c08309e86c39b3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 117d33633181af72584d04cf5f8431411b7bed7b and 0d57d546baa72802e1d9eb8110c08309e86c39b3:
	--> Added null checks = 44
	--> Removed null checks = 39
	--> Null dereferences checked for null = 29

Reverted to commit 117d33633181af72584d04cf5f8431411b7bed7b

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 117d33633181af72584d04cf5f8431411b7bed7b
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
Null check was added at revision 117d33633181af72584d04cf5f8431411b7bed7b
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 712b7153efb9c0f4ec01568bd60705e9f871fd3e and 117d33633181af72584d04cf5f8431411b7bed7b:
	--> Added null checks = 46
	--> Removed null checks = 39
	--> Null dereferences checked for null = 31

Reverted to commit 712b7153efb9c0f4ec01568bd60705e9f871fd3e

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 712b7153efb9c0f4ec01568bd60705e9f871fd3e
Null check was added at revision 712b7153efb9c0f4ec01568bd60705e9f871fd3e
Null check was added at revision 712b7153efb9c0f4ec01568bd60705e9f871fd3e
Null check was added at revision 712b7153efb9c0f4ec01568bd60705e9f871fd3e
Null check was added at revision 712b7153efb9c0f4ec01568bd60705e9f871fd3e
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName

Null variables: 
In method buildThrifTtypeList found:
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of b7537614f9af1c38f0640e86ab481b8534d1c206 and 712b7153efb9c0f4ec01568bd60705e9f871fd3e:
	--> Added null checks = 51
	--> Removed null checks = 39
	--> Null dereferences checked for null = 34

Reverted to commit b7537614f9af1c38f0640e86ab481b8534d1c206

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision b7537614f9af1c38f0640e86ab481b8534d1c206
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of d937718d6d8a6d0ab625b505a45ab5d6efc00919 and b7537614f9af1c38f0640e86ab481b8534d1c206:
	--> Added null checks = 52
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit d937718d6d8a6d0ab625b505a45ab5d6efc00919

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 1d3732e59c7e650d8bfe2fd80bb12c1100a6d9f2 and d937718d6d8a6d0ab625b505a45ab5d6efc00919:
	--> Added null checks = 52
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit 1d3732e59c7e650d8bfe2fd80bb12c1100a6d9f2

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 9781c8771e09692baf0d27a16b2299fa5b0508b2 and 1d3732e59c7e650d8bfe2fd80bb12c1100a6d9f2:
	--> Added null checks = 52
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit 9781c8771e09692baf0d27a16b2299fa5b0508b2

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 66c6672ed61905caba006d89ae7be52d0f53e88b and 9781c8771e09692baf0d27a16b2299fa5b0508b2:
	--> Added null checks = 52
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit 66c6672ed61905caba006d89ae7be52d0f53e88b

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 66c6672ed61905caba006d89ae7be52d0f53e88b
Null check was added at revision 66c6672ed61905caba006d89ae7be52d0f53e88b
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 66c6672ed61905caba006d89ae7be52d0f53e88b
Null check was added at revision 66c6672ed61905caba006d89ae7be52d0f53e88b
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of e2d8811d8285ee726ffe0d55b4e5d920de530efd and 66c6672ed61905caba006d89ae7be52d0f53e88b:
	--> Added null checks = 56
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit e2d8811d8285ee726ffe0d55b4e5d920de530efd

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 9bf287c3beea490b7b3f181f97548e0ea16a2b52 and e2d8811d8285ee726ffe0d55b4e5d920de530efd:
	--> Added null checks = 56
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit 9bf287c3beea490b7b3f181f97548e0ea16a2b52

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of a0c090060561057482deef57011435467e755c7f and 9bf287c3beea490b7b3f181f97548e0ea16a2b52:
	--> Added null checks = 56
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit a0c090060561057482deef57011435467e755c7f

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision a0c090060561057482deef57011435467e755c7f
Null check was added at revision a0c090060561057482deef57011435467e755c7f
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision a0c090060561057482deef57011435467e755c7f
Null check was added at revision a0c090060561057482deef57011435467e755c7f
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 779e263ce44cd8372ea992add0884c89d8dc3242 and a0c090060561057482deef57011435467e755c7f:
	--> Added null checks = 60
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit 779e263ce44cd8372ea992add0884c89d8dc3242

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of eb37bfc823688d142da4dc78e1f1c0d6e7634ab3 and 779e263ce44cd8372ea992add0884c89d8dc3242:
	--> Added null checks = 60
	--> Removed null checks = 39
	--> Null dereferences checked for null = 36

Reverted to commit eb37bfc823688d142da4dc78e1f1c0d6e7634ab3

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
Null check was added at revision eb37bfc823688d142da4dc78e1f1c0d6e7634ab3
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 95d21895a20cb67502e9b24f3940cf816c833345 and eb37bfc823688d142da4dc78e1f1c0d6e7634ab3:
	--> Added null checks = 66
	--> Removed null checks = 39
	--> Null dereferences checked for null = 42

Reverted to commit 95d21895a20cb67502e9b24f3940cf816c833345

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 95d21895a20cb67502e9b24f3940cf816c833345
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 95d21895a20cb67502e9b24f3940cf816c833345
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
Null check was added at revision 95d21895a20cb67502e9b24f3940cf816c833345
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 5b26e147929471b7dd8d49e21a3a40b3f8f8523e and 95d21895a20cb67502e9b24f3940cf816c833345:
	--> Added null checks = 69
	--> Removed null checks = 39
	--> Null dereferences checked for null = 46

Reverted to commit 5b26e147929471b7dd8d49e21a3a40b3f8f8523e

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 81044cf4026c67c99291f6a82b0489a08c4e0126 and 5b26e147929471b7dd8d49e21a3a40b3f8f8523e:
	--> Added null checks = 69
	--> Removed null checks = 39
	--> Null dereferences checked for null = 46

Reverted to commit 81044cf4026c67c99291f6a82b0489a08c4e0126

Added GoodwillConfig.java to ./goodwill/ repository source files.
Added GuiceConfig.java to ./goodwill/ repository source files.
Added Registrar.java to ./goodwill/ repository source files.
Added CSVFileStore.java to ./goodwill/ repository source files.
Added GoodwillStore.java to ./goodwill/ repository source files.
Added MySQLStore.java to ./goodwill/ repository source files.
Added ThriftField.java to ./goodwill/ repository source files.
Added ThriftType.java to ./goodwill/ repository source files.
Added MySQLStoreTest.java to ./goodwill/ repository source files.
Added ThriftFieldTest.java to ./goodwill/ repository source files.
Added ThriftTypeTest.java to ./goodwill/ repository source files.
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 
************ For file GoodwillConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file GuiceConfig.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file Registrar.java************

Null checks:
typeFound != null?JSONArray array = new JSONArray();
typeName == null?return Response.ok(store.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
typeFound != null?return Response.ok(typeFound.toJSON().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();

Null fields: 
	--> store

Null variables: 
Null assignments: 
************ For file CSVFileStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = line[0];

Null fields: 
	--> thriftTypes
	--> fileName

Null variables: 
In method parseFile found:
	--> currentThriftType
	--> currentThriftTypeName
	--> thriftField
Null assignments: 
************ For file GoodwillStore.java************

Null checks:

Null fields: 

Null variables: 
Null assignments: 
************ For file MySQLStore.java************

Null checks:
currentThriftTypeName == null?currentThriftTypeName = thriftType;
thriftTypes != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
thriftTypes.get(currentThriftTypeName) != null?currentThriftType = thriftTypes.get(currentThriftTypeName);
field.getSqlType() == null?statement.setNull(5, Types.VARCHAR);
field.getSqlLength() == null?statement.setNull(6, Types.INTEGER);
field.getSqlPrecision() == null?statement.setNull(7, Types.INTEGER);
field.getSqlScale() == null?statement.setNull(8, Types.INTEGER);
field.getDescription() == null?statement.setNull(9, Types.VARCHAR);

Null fields: 
	--> connection
	--> tableName
	--> thriftTypes

Null variables: 
In method buildThrifTtypeList found:
	--> currentThriftType
	--> currentThriftTypeName
Null assignments: 
In method buildThrifTtypeList found: 
	--> sqlLength
	--> sqlScale
	--> sqlPrecision
************ For file ThriftField.java************

Null checks:
name == null?throw new IllegalArgumentException("ThriftField name can't be null");
position == null?throw new IllegalArgumentException("ThriftField position can't be null");
sqlType == null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlScale != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
sqlPrecision != null?throw new IllegalArgumentException("Strings cannot have a scale or precision");
description != null?tFieldJSON.put(JSON_THRIFT_FIELD_DESCRIPTION, description);
sqlType != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlLength != null?JSONObject tFieldSQLJSON = new JSONObject();
sqlType != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_TYPE, sqlType);
sqlLength != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_LENGTH, sqlLength);
sqlScale != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_SCALE, sqlScale);
sqlPrecision != null?tFieldSQLJSON.put(JSON_THRIFT_FIELD_SQL_PRECISION, sqlPrecision);

Null fields: 
	--> type
	--> name
	--> position
	--> description
	--> sqlType
	--> sqlLength
	--> sqlScale
	--> sqlPrecision

Null variables: 
Null assignments: 
************ For file ThriftType.java************

Null checks:

Null fields: 
	--> name

Null variables: 
Null assignments: 
************ For file MySQLStoreTest.java************

Null checks:

Null fields: 
	--> type1
	--> type2
	--> store

Null variables: 
Null assignments: 
************ For file ThriftFieldTest.java************

Null checks:

Null fields: 
	--> thriftField
	--> thriftFieldWithSQL
	--> thriftFieldWithDescription
	--> thriftFieldWithSQLAndDescription

Null variables: 
In method runAllAsserts found:
	--> jsonThriftFieldSQL
Null assignments: 
************ For file ThriftTypeTest.java************

Null checks:

Null fields: 
	--> thriftFieldWithSQLAndDescription
	--> thriftType

Null variables: 
Null assignments: 

Diff of 50523650f906f9885a4c78f3594a582d168e894f and 81044cf4026c67c99291f6a82b0489a08c4e0126:
	--> Added null checks = 69
	--> Removed null checks = 39
	--> Null dereferences checked for null = 46
Null checks found in initial commit -- added at creation of the repository.
****Analysis complete for first commit****
Pierre-Alexandre Meyer added null count = 69 in repository goodwill
Pierre-Alexandre Meyer removed null count = 39 in repository goodwill
Pierre-Alexandre Meyer deref count = 46 in repository goodwill
GitAPIException thrown!
Cannot revert commit '50523650f906f9885a4c78f3594a582d168e894f' because it has 0 parents, only commits with exactly one parent are supported
